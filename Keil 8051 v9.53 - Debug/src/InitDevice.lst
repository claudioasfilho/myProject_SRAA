C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/20/2016 15:57:36 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\clfilho
                    -\SimplicityStudio\v3_workspace\myProject - DAC Enabled\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNING
                    -LEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:/Users/clfilho/SimplicityStudio/v3_worksp
                    -ace/myProject - DAC Enabled/inc;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/shared/si8051Base;C:
                    -/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/EFM8BB3;C:/SiliconLabs/SimplicityStudio/v3/developer/s
                    -dks/si8051/v3//Device/EFM8BB3/inc) PRINT(.\src\InitDevice.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\InitDevic
                    -e.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8BB3_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void enter_DefaultMode_from_RESET(void) {
  23   1              // $[Config Calls]
  24   1              // Save the SFRPAGE
  25   1              uint8_t SFRPAGE_save = SFRPAGE;
  26   1              WDT_0_enter_DefaultMode_from_RESET();
  27   1              PORTS_0_enter_DefaultMode_from_RESET();
  28   1              PORTS_1_enter_DefaultMode_from_RESET();
  29   1              PORTS_3_enter_DefaultMode_from_RESET();
  30   1              PBCFG_0_enter_DefaultMode_from_RESET();
  31   1              ADC_0_enter_DefaultMode_from_RESET();
  32   1              CMP_0_enter_DefaultMode_from_RESET();
  33   1              DAC_0_enter_DefaultMode_from_RESET();
  34   1              DACGCF_0_enter_DefaultMode_from_RESET();
  35   1              VREF_0_enter_DefaultMode_from_RESET();
  36   1              HFOSC_0_enter_DefaultMode_from_RESET();
  37   1              CLOCK_0_enter_DefaultMode_from_RESET();
  38   1              TIMER01_0_enter_DefaultMode_from_RESET();
  39   1              TIMER16_2_enter_DefaultMode_from_RESET();
  40   1              TIMER16_4_enter_DefaultMode_from_RESET();
  41   1              TIMER16_5_enter_DefaultMode_from_RESET();
  42   1              TIMER_SETUP_0_enter_DefaultMode_from_RESET();
  43   1              PCA_0_enter_DefaultMode_from_RESET();
  44   1              PCACH_0_enter_DefaultMode_from_RESET();
  45   1              PCACH_1_enter_DefaultMode_from_RESET();
  46   1              INTERRUPT_0_enter_DefaultMode_from_RESET();
  47   1              // Restore the SFRPAGE
  48   1              SFRPAGE = SFRPAGE_save;
  49   1              // [Config Calls]$
  50   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/20/2016 15:57:36 PAGE 2   

  51   1      }
  52          
  53          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
  54   1              // $[XBR2 - Port I/O Crossbar 2]
  55   1              /*
  56   1               // Weak Pullups enabled 
  57   1               // Crossbar enabled
  58   1               // UART1 I/O unavailable at Port pin
  59   1               // UART1 RTS1 unavailable at Port pin
  60   1               // UART1 CTS1 unavailable at Port pin
  61   1               */
  62   1              SFRPAGE = 0x00;
  63   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED
  64   1                              | XBR2_URT1E__DISABLED | XBR2_URT1RTSE__DISABLED
  65   1                              | XBR2_URT1CTSE__DISABLED;
  66   1              // [XBR2 - Port I/O Crossbar 2]$
  67   1      
  68   1              // $[PRTDRV - Port Drive Strength]
  69   1              // [PRTDRV - Port Drive Strength]$
  70   1      
  71   1              // $[XBR0 - Port I/O Crossbar 0]
  72   1              // [XBR0 - Port I/O Crossbar 0]$
  73   1      
  74   1              // $[XBR1 - Port I/O Crossbar 1]
  75   1              /*
  76   1               // CEX0 routed to Port pin
  77   1               // ECI unavailable at Port pin
  78   1               // T0 unavailable at Port pin
  79   1               // T1 routed to Port pin
  80   1               // T2 unavailable at Port pin
  81   1               */
  82   1              XBR1 = XBR1_PCA0ME__CEX0 | XBR1_ECIE__DISABLED | XBR1_T0E__DISABLED
  83   1                              | XBR1_T1E__ENABLED | XBR1_T2E__DISABLED;
  84   1              // [XBR1 - Port I/O Crossbar 1]$
  85   1      
  86   1      }
  87          
  88          extern void CMP_0_enter_DefaultMode_from_RESET(void) {
  89   1              // $[CMP0MX - Comparator 0 Multiplexer Selection]
  90   1              /*
  91   1               // External pin CMP0P.1
  92   1               // External pin CMP0N.15
  93   1               */
  94   1              uint8_t delay;
  95   1      
  96   1              CMP0MX = CMP0MX_CMXP__CMP0P1 | CMP0MX_CMXN__CMP0N15;
  97   1              // Delay to allow the comparator inputs to settle
  98   1              for (delay = 0; delay < 0x20; delay++)
  99   1                      ;
 100   1              // [CMP0MX - Comparator 0 Multiplexer Selection]$
 101   1      
 102   1              // $[CMP0CN1 - Comparator 0 Control 1]
 103   1              /*
 104   1               // Internal Comparator DAC Reference Level = 0x1F
 105   1               // The comparator output will always reflect the input conditions
 106   1               */
 107   1              SFRPAGE = 0x30;
 108   1              CMP0CN1 = (0x1F << CMP0CN1_DACLVL__SHIFT) | CMP0CN1_CPINH__DISABLED;
 109   1              // [CMP0CN1 - Comparator 0 Control 1]$
 110   1      
 111   1              // $[CMP0MD - Comparator 0 Mode]
 112   1              /*
 113   1               // Mode 0 
C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/20/2016 15:57:36 PAGE 3   

 114   1               // Connect the CMP- input to the internal DAC output, and CMP+ is
 115   1               //     selected by CMXP. The internal DAC uses the signal specified by CMXN
 116   1               //     as its full-scale reference
 117   1               // Output is inverted
 118   1               */
 119   1              SFRPAGE = 0x00;
 120   1              CMP0MD &= ~CMP0MD_CPMD__FMASK;
 121   1              CMP0MD |= CMP0MD_INSL__CMXP_DAC | CMP0MD_CPINV__INVERT;
 122   1              // [CMP0MD - Comparator 0 Mode]$
 123   1      
 124   1              // $[CMP0CN0 - Comparator 0 Control 0]
 125   1              /*
 126   1               // Comparator enabled
 127   1               */
 128   1              CMP0CN0 |= CMP0CN0_CPEN__ENABLED;
 129   1              // [CMP0CN0 - Comparator 0 Control 0]$
 130   1      
 131   1      }
 132          
 133          extern void HFOSC_0_enter_DefaultMode_from_RESET(void) {
 134   1              // $[HFOCN - High Frequency Oscillator Control]
 135   1              /*
 136   1               // Force High Frequency Oscillator 0 to run
 137   1               // Disable High Frequency Oscillator 1 
 138   1               */
 139   1              SFRPAGE = 0x10;
 140   1              HFOCN = HFOCN_HFO0EN__ENABLED | HFOCN_HFO1EN__DISABLED;
 141   1              // [HFOCN - High Frequency Oscillator Control]$
 142   1      
 143   1      }
 144          
 145          extern void PORTS_0_enter_DefaultMode_from_RESET(void) {
 146   1              // $[P0 - Port 0 Pin Latch]
 147   1              /*
 148   1               // P0.0 is high. Set P0.0 to drive or float high
 149   1               // P0.1 is high. Set P0.1 to drive or float high
 150   1               // P0.2 is high. Set P0.2 to drive or float high
 151   1               // P0.3 is low. Set P0.3 to drive low
 152   1               // P0.4 is high. Set P0.4 to drive or float high
 153   1               // P0.5 is low. Set P0.5 to drive low
 154   1               // P0.6 is high. Set P0.6 to drive or float high
 155   1               // P0.7 is high. Set P0.7 to drive or float high
 156   1               */
 157   1              P0 = P0_B0__HIGH | P0_B1__HIGH | P0_B2__HIGH | P0_B3__LOW | P0_B4__HIGH
 158   1                              | P0_B5__LOW | P0_B6__HIGH | P0_B7__HIGH;
 159   1              // [P0 - Port 0 Pin Latch]$
 160   1      
 161   1              // $[P0MDOUT - Port 0 Output Mode]
 162   1              /*
 163   1               // P0.0 output is open-drain
 164   1               // P0.1 output is push-pull
 165   1               // P0.2 output is open-drain
 166   1               // P0.3 output is open-drain
 167   1               // P0.4 output is open-drain
 168   1               // P0.5 output is open-drain
 169   1               // P0.6 output is open-drain
 170   1               // P0.7 output is open-drain
 171   1               */
 172   1              P0MDOUT = P0MDOUT_B0__OPEN_DRAIN | P0MDOUT_B1__PUSH_PULL
 173   1                              | P0MDOUT_B2__OPEN_DRAIN | P0MDOUT_B3__OPEN_DRAIN
 174   1                              | P0MDOUT_B4__OPEN_DRAIN | P0MDOUT_B5__OPEN_DRAIN
 175   1                              | P0MDOUT_B6__OPEN_DRAIN | P0MDOUT_B7__OPEN_DRAIN;
 176   1              // [P0MDOUT - Port 0 Output Mode]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/20/2016 15:57:36 PAGE 4   

 177   1      
 178   1              // $[P0MDIN - Port 0 Input Mode]
 179   1              /*
 180   1               // P0.0 pin is configured for analog mode
 181   1               // P0.1 pin is configured for digital mode
 182   1               // P0.2 pin is configured for analog mode
 183   1               // P0.3 pin is configured for digital mode
 184   1               // P0.4 pin is configured for digital mode
 185   1               // P0.5 pin is configured for digital mode
 186   1               // P0.6 pin is configured for digital mode
 187   1               // P0.7 pin is configured for digital mode
 188   1               */
 189   1              P0MDIN = P0MDIN_B0__ANALOG | P0MDIN_B1__DIGITAL | P0MDIN_B2__ANALOG
 190   1                              | P0MDIN_B3__DIGITAL | P0MDIN_B4__DIGITAL | P0MDIN_B5__DIGITAL
 191   1                              | P0MDIN_B6__DIGITAL | P0MDIN_B7__DIGITAL;
 192   1              // [P0MDIN - Port 0 Input Mode]$
 193   1      
 194   1              // $[P0SKIP - Port 0 Skip]
 195   1              /*
 196   1               // P0.0 pin is skipped by the crossbar
 197   1               // P0.1 pin is not skipped by the crossbar
 198   1               // P0.2 pin is skipped by the crossbar
 199   1               // P0.3 pin is not skipped by the crossbar
 200   1               // P0.4 pin is not skipped by the crossbar
 201   1               // P0.5 pin is not skipped by the crossbar
 202   1               // P0.6 pin is not skipped by the crossbar
 203   1               // P0.7 pin is not skipped by the crossbar
 204   1               */
 205   1              P0SKIP = P0SKIP_B0__SKIPPED | P0SKIP_B1__NOT_SKIPPED | P0SKIP_B2__SKIPPED
 206   1                              | P0SKIP_B3__NOT_SKIPPED | P0SKIP_B4__NOT_SKIPPED
 207   1                              | P0SKIP_B5__NOT_SKIPPED | P0SKIP_B6__NOT_SKIPPED
 208   1                              | P0SKIP_B7__NOT_SKIPPED;
 209   1              // [P0SKIP - Port 0 Skip]$
 210   1      
 211   1              // $[P0MASK - Port 0 Mask]
 212   1              // [P0MASK - Port 0 Mask]$
 213   1      
 214   1              // $[P0MAT - Port 0 Match]
 215   1              /*
 216   1               // P0.0 pin logic value is compared with logic HIGH
 217   1               // P0.1 pin logic value is compared with logic HIGH
 218   1               // P0.2 pin logic value is compared with logic HIGH
 219   1               // P0.3 pin logic value is compared with logic LOW
 220   1               // P0.4 pin logic value is compared with logic HIGH
 221   1               // P0.5 pin logic value is compared with logic LOW
 222   1               // P0.6 pin logic value is compared with logic HIGH
 223   1               // P0.7 pin logic value is compared with logic HIGH
 224   1               */
 225   1              P0MAT = P0MAT_B0__HIGH | P0MAT_B1__HIGH | P0MAT_B2__HIGH | P0MAT_B3__LOW
 226   1                              | P0MAT_B4__HIGH | P0MAT_B5__LOW | P0MAT_B6__HIGH | P0MAT_B7__HIGH;
 227   1              // [P0MAT - Port 0 Match]$
 228   1      
 229   1      }
 230          
 231          extern void CLOCK_0_enter_DefaultMode_from_RESET(void) {
 232   1              // $[HFOSC1 Setup]
 233   1              // [HFOSC1 Setup]$
 234   1      
 235   1              // $[CLKSEL - Clock Select]
 236   1              /*
 237   1               // Clock derived from the Internal High Frequency Oscillator 0
 238   1               // SYSCLK is equal to selected clock source divided by 1
 239   1               */
C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/20/2016 15:57:36 PAGE 5   

 240   1              SFRPAGE = 0x00;
 241   1              CLKSEL = CLKSEL_CLKSL__HFOSC0 | CLKSEL_CLKDIV__SYSCLK_DIV_1;
 242   1              while ((CLKSEL & CLKSEL_DIVRDY__BMASK) == CLKSEL_DIVRDY__NOT_READY)
 243   1                      ;
 244   1              // [CLKSEL - Clock Select]$
 245   1      
 246   1      }
 247          
 248          extern void CIP51_0_enter_DefaultMode_from_RESET(void) {
 249   1              // $[PFE0CN - Prefetch Engine Control]
 250   1              /*
 251   1               // SYSCLK < 50 MHz
 252   1               */
 253   1              PFE0CN = PFE0CN_FLRT__SYSCLK_BELOW_50_MHZ;
 254   1              // [PFE0CN - Prefetch Engine Control]$
 255   1      
 256   1      }
 257          
 258          extern void TIMER16_2_enter_DefaultMode_from_RESET(void) {
 259   1              // $[Timer Initialization]
 260   1              // Save Timer Configuration
 261   1              uint8_t TMR2CN0_TR2_save;
 262   1              TMR2CN0_TR2_save = TMR2CN0 & TMR2CN0_TR2__BMASK;
 263   1              // Stop Timer
 264   1              TMR2CN0 &= ~(TMR2CN0_TR2__BMASK);
 265   1              // [Timer Initialization]$
 266   1      
 267   1              // $[TMR2CN1 - Timer 2 Control 1]
 268   1              // [TMR2CN1 - Timer 2 Control 1]$
 269   1      
 270   1              // $[TMR2CN0 - Timer 2 Control]
 271   1              // [TMR2CN0 - Timer 2 Control]$
 272   1      
 273   1              // $[TMR2H - Timer 2 High Byte]
 274   1              // [TMR2H - Timer 2 High Byte]$
 275   1      
 276   1              // $[TMR2L - Timer 2 Low Byte]
 277   1              // [TMR2L - Timer 2 Low Byte]$
 278   1      
 279   1              // $[TMR2RLH - Timer 2 Reload High Byte]
 280   1              /*
 281   1               // Timer 2 Reload High Byte = 0xFF
 282   1               */
 283   1              TMR2RLH = (0xFF << TMR2RLH_TMR2RLH__SHIFT);
 284   1              // [TMR2RLH - Timer 2 Reload High Byte]$
 285   1      
 286   1              // $[TMR2RLL - Timer 2 Reload Low Byte]
 287   1              /*
 288   1               // Timer 2 Reload Low Byte = 0xEC
 289   1               */
 290   1              TMR2RLL = (0xEC << TMR2RLL_TMR2RLL__SHIFT);
 291   1              // [TMR2RLL - Timer 2 Reload Low Byte]$
 292   1      
 293   1              // $[TMR2CN0]
 294   1              /*
 295   1               // Start Timer 2 running
 296   1               */
 297   1              TMR2CN0 |= TMR2CN0_TR2__RUN;
 298   1              // [TMR2CN0]$
 299   1      
 300   1              // $[Timer Restoration]
 301   1              // Restore Timer Configuration
 302   1              TMR2CN0 |= TMR2CN0_TR2_save;
C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/20/2016 15:57:36 PAGE 6   

 303   1              // [Timer Restoration]$
 304   1      
 305   1      }
 306          
 307          extern void INTERRUPT_0_enter_DefaultMode_from_RESET(void) {
 308   1              // $[EIE1 - Extended Interrupt Enable 1]
 309   1              /*
 310   1               // Enable interrupt requests generated by the ADINT flag
 311   1               // Disable ADC0 Window Comparison interrupt
 312   1               // Disable CP0 interrupts
 313   1               // Disable CP1 interrupts
 314   1               // Disable all Port Match interrupts
 315   1               // Disable all PCA0 interrupts
 316   1               // Disable all SMB0 interrupts
 317   1               // Disable Timer 3 interrupts
 318   1               */
 319   1              EIE1 = EIE1_EADC0__ENABLED | EIE1_EWADC0__DISABLED | EIE1_ECP0__DISABLED
 320   1                              | EIE1_ECP1__DISABLED | EIE1_EMAT__DISABLED | EIE1_EPCA0__DISABLED
 321   1                              | EIE1_ESMB0__DISABLED | EIE1_ET3__DISABLED;
 322   1              // [EIE1 - Extended Interrupt Enable 1]$
 323   1      
 324   1              // $[EIE2 - Extended Interrupt Enable 2]
 325   1              // [EIE2 - Extended Interrupt Enable 2]$
 326   1      
 327   1              // $[EIP1H - Extended Interrupt Priority 1 High]
 328   1              // [EIP1H - Extended Interrupt Priority 1 High]$
 329   1      
 330   1              // $[EIP1 - Extended Interrupt Priority 1 Low]
 331   1              // [EIP1 - Extended Interrupt Priority 1 Low]$
 332   1      
 333   1              // $[EIP2 - Extended Interrupt Priority 2]
 334   1              // [EIP2 - Extended Interrupt Priority 2]$
 335   1      
 336   1              // $[EIP2H - Extended Interrupt Priority 2 High]
 337   1              // [EIP2H - Extended Interrupt Priority 2 High]$
 338   1      
 339   1              // $[IE - Interrupt Enable]
 340   1              /*
 341   1               // Enable each interrupt according to its individual mask setting
 342   1               // Disable external interrupt 0
 343   1               // Disable external interrupt 1
 344   1               // Disable all SPI0 interrupts
 345   1               // Enable interrupt requests generated by the TF0 flag
 346   1               // Disable all Timer 1 interrupt
 347   1               // Enable interrupt requests generated by the TF2L or TF2H flags
 348   1               // Disable UART0 interrupt
 349   1               */
 350   1              IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED
 351   1                              | IE_ESPI0__DISABLED | IE_ET0__ENABLED | IE_ET1__DISABLED
 352   1                              | IE_ET2__ENABLED | IE_ES0__DISABLED;
 353   1              // [IE - Interrupt Enable]$
 354   1      
 355   1              // $[IP - Interrupt Priority]
 356   1              // [IP - Interrupt Priority]$
 357   1      
 358   1              // $[IPH - Interrupt Priority High]
 359   1              /*
 360   1               // External Interrupt 0 priority MSB set to low
 361   1               // External Interrupt 1 priority MSB set to low
 362   1               // SPI0 interrupt priority MSB set to low
 363   1               // Timer 0 interrupt priority MSB set to high
 364   1               // Timer 1 interrupt priority MSB set to low
 365   1               // Timer 2 interrupt priority MSB set to low
C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/20/2016 15:57:36 PAGE 7   

 366   1               // UART0 interrupt priority MSB set to low
 367   1               */
 368   1              SFRPAGE = 0x10;
 369   1              IPH = IPH_PHX0__LOW | IPH_PHX1__LOW | IPH_PHSPI0__LOW | IPH_PHT0__HIGH
 370   1                              | IPH_PHT1__LOW | IPH_PHT2__LOW | IPH_PHS0__LOW;
 371   1              // [IPH - Interrupt Priority High]$
 372   1      
 373   1      }
 374          
 375          extern void PCA_0_enter_DefaultMode_from_RESET(void) {
 376   1              // $[PCA Off]
 377   1              PCA0CN0_CR = PCA0CN0_CR__STOP;
 378   1              // [PCA Off]$
 379   1      
 380   1              // $[PCA0MD - PCA Mode]
 381   1              /*
 382   1               // PCA continues to function normally while the system controller is in
 383   1               //     Idle Mode
 384   1               // Disable the CF interrupt
 385   1               // System clock
 386   1               */
 387   1              PCA0MD = PCA0MD_CIDL__NORMAL | PCA0MD_ECF__OVF_INT_DISABLED
 388   1                              | PCA0MD_CPS__SYSCLK;
 389   1              // [PCA0MD - PCA Mode]$
 390   1      
 391   1              // $[PCA0CENT - PCA Center Alignment Enable]
 392   1              // [PCA0CENT - PCA Center Alignment Enable]$
 393   1      
 394   1              // $[PCA0CLR - PCA Comparator Clear Control]
 395   1              /*
 396   1               // PCA channel
 397   1               // Comparator 0 will be used for the comparator clear function
 398   1               // Enable the comparator clear function on PCA channel 0
 399   1               // Disable the comparator clear function on PCA channel 1
 400   1               // Disable the comparator clear function on PCA channel 2
 401   1               // Disable the comparator clear function on PCA channel 3
 402   1               // Disable the comparator clear function on PCA channel 4
 403   1               // Disable the comparator clear function on PCA channel 5
 404   1               */
 405   1              PCA0CLR = PCA0CLR_CPCPOL__LOW | PCA0CLR_CPCSEL__CMP_0
 406   1                              | PCA0CLR_CPCE0__ENABLED | PCA0CLR_CPCE1__DISABLED
 407   1                              | PCA0CLR_CPCE2__DISABLED | PCA0CLR_CPCE3__DISABLED
 408   1                              | PCA0CLR_CPCE4__DISABLED | PCA0CLR_CPCE5__DISABLED;
 409   1              // [PCA0CLR - PCA Comparator Clear Control]$
 410   1      
 411   1              // $[PCA0L - PCA Counter/Timer Low Byte]
 412   1              /*
 413   1               // PCA Counter/Timer Low Byte = 0xE8
 414   1               */
 415   1              PCA0L = (0xE8 << PCA0L_PCA0L__SHIFT);
 416   1              // [PCA0L - PCA Counter/Timer Low Byte]$
 417   1      
 418   1              // $[PCA0H - PCA Counter/Timer High Byte]
 419   1              /*
 420   1               // PCA Counter/Timer High Byte = 0x03
 421   1               */
 422   1              PCA0H = (0x03 << PCA0H_PCA0H__SHIFT);
 423   1              // [PCA0H - PCA Counter/Timer High Byte]$
 424   1      
 425   1              // $[PCA0POL - PCA Output Polarity]
 426   1              // [PCA0POL - PCA Output Polarity]$
 427   1      
 428   1              // $[PCA0PWM - PCA PWM Configuration]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/20/2016 15:57:36 PAGE 8   

 429   1              /*
 430   1               // 11 bits
 431   1               */
 432   1              PCA0PWM &= ~PCA0PWM_CLSEL__FMASK;
 433   1              PCA0PWM |= PCA0PWM_CLSEL__11_BITS;
 434   1              // [PCA0PWM - PCA PWM Configuration]$
 435   1      
 436   1              // $[PCA On]
 437   1              PCA0CN0_CR = PCA0CN0_CR__RUN;
 438   1              // [PCA On]$
 439   1      
 440   1      }
 441          
 442          extern void PCACH_0_enter_DefaultMode_from_RESET(void) {
 443   1              // $[PCA0 Settings Save]
 444   1              // Select Capture/Compare register)
 445   1              PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 446   1              // [PCA0 Settings Save]$
 447   1      
 448   1              // $[PCA0CPM0 - PCA Channel 0 Capture/Compare Mode]
 449   1              /*
 450   1               // Disable negative edge capture
 451   1               // Disable CCF0 interrupts
 452   1               // Enable match function
 453   1               // 8 to 11-bit PWM selected
 454   1               // Disable positive edge capture
 455   1               // Enable comparator function
 456   1               // Enable PWM function
 457   1               // Disable toggle function
 458   1               */
 459   1              PCA0CPM0 = PCA0CPM0_CAPN__DISABLED | PCA0CPM0_ECCF__DISABLED
 460   1                              | PCA0CPM0_MAT__ENABLED | PCA0CPM0_PWM16__8_BIT
 461   1                              | PCA0CPM0_CAPP__DISABLED | PCA0CPM0_ECOM__ENABLED
 462   1                              | PCA0CPM0_PWM__ENABLED | PCA0CPM0_TOG__DISABLED;
 463   1              // [PCA0CPM0 - PCA Channel 0 Capture/Compare Mode]$
 464   1      
 465   1              // $[PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]
 466   1              /*
 467   1               // PCA Channel 0 Capture Module Low Byte = 0xFF
 468   1               */
 469   1              PCA0CPL0 = (0xFF << PCA0CPL0_PCA0CPL0__SHIFT);
 470   1              // [PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]$
 471   1      
 472   1              // $[PCA0CPH0 - PCA Channel 0 Capture Module High Byte]
 473   1              /*
 474   1               // PCA Channel 0 Capture Module High Byte = 0x03
 475   1               */
 476   1              PCA0CPH0 = (0x03 << PCA0CPH0_PCA0CPH0__SHIFT);
 477   1              // [PCA0CPH0 - PCA Channel 0 Capture Module High Byte]$
 478   1      
 479   1              // $[Auto-reload]
 480   1              PCA0PWM |= PCA0PWM_ARSEL__AUTORELOAD;
 481   1              /*
 482   1               // PCA Channel 0 Capture Module Low Byte = 0xFF
 483   1               */
 484   1              PCA0CPL0 = (0xFF << PCA0CPL0_PCA0CPL0__SHIFT);
 485   1      
 486   1              /*
 487   1               // PCA Channel 0 Capture Module High Byte = 0x03
 488   1               */
 489   1              PCA0CPH0 = (0x03 << PCA0CPH0_PCA0CPH0__SHIFT);
 490   1      
 491   1              PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/20/2016 15:57:36 PAGE 9   

 492   1              // [Auto-reload]$
 493   1      
 494   1              // $[PCA0 Settings Restore]
 495   1              // [PCA0 Settings Restore]$
 496   1      
 497   1      }
 498          
 499          extern void WDT_0_enter_DefaultMode_from_RESET(void) {
 500   1              // $[WDTCN - Watchdog Timer Control]
 501   1              SFRPAGE = 0x00;
 502   1              //Disable Watchdog with key sequence
 503   1              WDTCN = 0xDE; //First key
 504   1              WDTCN = 0xAD; //Second key
 505   1              // [WDTCN - Watchdog Timer Control]$
 506   1      
 507   1      }
 508          
 509          extern void TIMER01_0_enter_DefaultMode_from_RESET(void) {
 510   1              // $[Timer Initialization]
 511   1              //Save Timer Configuration
 512   1              uint8_t TCON_save;
 513   1              TCON_save = TCON;
 514   1              //Stop Timers
 515   1              TCON &= ~TCON_TR0__BMASK & ~TCON_TR1__BMASK;
 516   1      
 517   1              // [Timer Initialization]$
 518   1      
 519   1              // $[TH0 - Timer 0 High Byte]
 520   1              // [TH0 - Timer 0 High Byte]$
 521   1      
 522   1              // $[TL0 - Timer 0 Low Byte]
 523   1              // [TL0 - Timer 0 Low Byte]$
 524   1      
 525   1              // $[TH1 - Timer 1 High Byte]
 526   1              // [TH1 - Timer 1 High Byte]$
 527   1      
 528   1              // $[TL1 - Timer 1 Low Byte]
 529   1              // [TL1 - Timer 1 Low Byte]$
 530   1      
 531   1              // $[Timer Restoration]
 532   1              //Restore Timer Configuration
 533   1              TCON |= (TCON_save & TCON_TR0__BMASK) | (TCON_save & TCON_TR1__BMASK);
 534   1      
 535   1              // [Timer Restoration]$
 536   1      
 537   1      }
 538          
 539          extern void TIMER_SETUP_0_enter_DefaultMode_from_RESET(void) {
 540   1              // $[CKCON0 - Clock Control 0]
 541   1              /*
 542   1               // System clock divided by 4
 543   1               // Counter/Timer 0 uses the clock defined by the prescale field, SCA
 544   1               // Timer 2 high byte uses the clock defined by T2XCLK in TMR2CN0
 545   1               // Timer 2 low byte uses the clock defined by T2XCLK in TMR2CN0
 546   1               // Timer 3 high byte uses the clock defined by T3XCLK in TMR3CN0
 547   1               // Timer 3 low byte uses the clock defined by T3XCLK in TMR3CN0
 548   1               // Timer 1 uses the clock defined by the prescale field, SCA
 549   1               */
 550   1              SFRPAGE = 0x00;
 551   1              CKCON0 = CKCON0_SCA__SYSCLK_DIV_4 | CKCON0_T0M__PRESCALE
 552   1                              | CKCON0_T2MH__EXTERNAL_CLOCK | CKCON0_T2ML__EXTERNAL_CLOCK
 553   1                              | CKCON0_T3MH__EXTERNAL_CLOCK | CKCON0_T3ML__EXTERNAL_CLOCK
 554   1                              | CKCON0_T1M__PRESCALE;
C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/20/2016 15:57:36 PAGE 10  

 555   1              // [CKCON0 - Clock Control 0]$
 556   1      
 557   1              // $[CKCON1 - Clock Control 1]
 558   1              // [CKCON1 - Clock Control 1]$
 559   1      
 560   1              // $[TMOD - Timer 0/1 Mode]
 561   1              /*
 562   1               // Mode 1, 16-bit Counter/Timer
 563   1               // Mode 1, 16-bit Counter/Timer
 564   1               // Timer Mode. Timer 0 increments on the clock defined by T0M in the
 565   1               //     CKCON0 register
 566   1               // Timer 0 enabled when TR0 = 1 irrespective of INT0 logic level
 567   1               // Counter Mode. Timer 1 increments on high-to-low transitions of an
 568   1               //     external pin
 569   1               // Timer 1 enabled when TR1 = 1 irrespective of INT1 logic level
 570   1               */
 571   1              TMOD = TMOD_T0M__MODE1 | TMOD_T1M__MODE1 | TMOD_CT0__TIMER
 572   1                              | TMOD_GATE0__DISABLED | TMOD_CT1__COUNTER | TMOD_GATE1__DISABLED;
 573   1              // [TMOD - Timer 0/1 Mode]$
 574   1      
 575   1              // $[TCON - Timer 0/1 Control]
 576   1              /*
 577   1               // Start Timer 0 running
 578   1               */
 579   1              TCON |= TCON_TR0__RUN;
 580   1              // [TCON - Timer 0/1 Control]$
 581   1      
 582   1      }
 583          
 584          extern void PORTS_3_enter_DefaultMode_from_RESET(void) {
 585   1              // $[P3 - Port 3 Pin Latch]
 586   1              // [P3 - Port 3 Pin Latch]$
 587   1      
 588   1              // $[P3MDOUT - Port 3 Output Mode]
 589   1              /*
 590   1               // P3.0 output is open-drain
 591   1               // P3.1 output is open-drain
 592   1               // P3.2 output is open-drain
 593   1               // P3.3 output is push-pull
 594   1               // P3.4 output is open-drain
 595   1               // P3.7 output is open-drain
 596   1               */
 597   1              SFRPAGE = 0x20;
 598   1              P3MDOUT = P3MDOUT_B0__OPEN_DRAIN | P3MDOUT_B1__OPEN_DRAIN
 599   1                              | P3MDOUT_B2__OPEN_DRAIN | P3MDOUT_B3__PUSH_PULL
 600   1                              | P3MDOUT_B4__OPEN_DRAIN | P3MDOUT_B7__OPEN_DRAIN;
 601   1              // [P3MDOUT - Port 3 Output Mode]$
 602   1      
 603   1              // $[P3MDIN - Port 3 Input Mode]
 604   1              /*
 605   1               // P3.0 pin is configured for analog mode
 606   1               // P3.1 pin is configured for digital mode
 607   1               // P3.2 pin is configured for digital mode
 608   1               // P3.3 pin is configured for digital mode
 609   1               // P3.4 pin is configured for digital mode
 610   1               // P3.7 pin is configured for digital mode
 611   1               */
 612   1              P3MDIN = P3MDIN_B0__ANALOG | P3MDIN_B1__DIGITAL | P3MDIN_B2__DIGITAL
 613   1                              | P3MDIN_B3__DIGITAL | P3MDIN_B4__DIGITAL | P3MDIN_B7__DIGITAL;
 614   1              // [P3MDIN - Port 3 Input Mode]$
 615   1      
 616   1      }
 617          
C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/20/2016 15:57:36 PAGE 11  

 618          extern void TIMER16_4_enter_DefaultMode_from_RESET(void) {
 619   1              // $[Timer Initialization]
 620   1              // Save Timer Configuration
 621   1              uint8_t TMR4CN0_TR4_save;
 622   1              SFRPAGE = 0x10;
 623   1              TMR4CN0_TR4_save = TMR4CN0 & TMR4CN0_TR4__BMASK;
 624   1              // Stop Timer
 625   1              TMR4CN0 &= ~(TMR4CN0_TR4__BMASK);
 626   1              // [Timer Initialization]$
 627   1      
 628   1              // $[TMR4CN1 - Timer 4 Control 1]
 629   1              // [TMR4CN1 - Timer 4 Control 1]$
 630   1      
 631   1              // $[TMR4CN0 - Timer 4 Control]
 632   1              // [TMR4CN0 - Timer 4 Control]$
 633   1      
 634   1              // $[TMR4H - Timer 4 High Byte]
 635   1              // [TMR4H - Timer 4 High Byte]$
 636   1      
 637   1              // $[TMR4L - Timer 4 Low Byte]
 638   1              // [TMR4L - Timer 4 Low Byte]$
 639   1      
 640   1              // $[TMR4RLH - Timer 4 Reload High Byte]
 641   1              /*
 642   1               // Timer 4 Reload High Byte = 0xF8
 643   1               */
 644   1              TMR4RLH = (0xF8 << TMR4RLH_TMR4RLH__SHIFT);
 645   1              // [TMR4RLH - Timer 4 Reload High Byte]$
 646   1      
 647   1              // $[TMR4RLL - Timer 4 Reload Low Byte]
 648   1              /*
 649   1               // Timer 4 Reload Low Byte = 0x07
 650   1               */
 651   1              TMR4RLL = (0x07 << TMR4RLL_TMR4RLL__SHIFT);
 652   1              // [TMR4RLL - Timer 4 Reload Low Byte]$
 653   1      
 654   1              // $[TMR4CN0]
 655   1              // [TMR4CN0]$
 656   1      
 657   1              // $[Timer Restoration]
 658   1              // Restore Timer Configuration
 659   1              TMR4CN0 |= TMR4CN0_TR4_save;
 660   1              // [Timer Restoration]$
 661   1      
 662   1      }
 663          
 664          extern void TIMER16_5_enter_DefaultMode_from_RESET(void) {
 665   1              // $[Timer Initialization]
 666   1              // Save Timer Configuration
 667   1              uint8_t TMR5CN0_TR5_save;
 668   1              TMR5CN0_TR5_save = TMR5CN0 & TMR5CN0_TR5__BMASK;
 669   1              // Stop Timer
 670   1              TMR5CN0 &= ~(TMR5CN0_TR5__BMASK);
 671   1              // [Timer Initialization]$
 672   1      
 673   1              // $[TMR5CN1 - Timer 5 Control 1]
 674   1              // [TMR5CN1 - Timer 5 Control 1]$
 675   1      
 676   1              // $[TMR5CN0 - Timer 5 Control]
 677   1              // [TMR5CN0 - Timer 5 Control]$
 678   1      
 679   1              // $[TMR5H - Timer 5 High Byte]
 680   1              // [TMR5H - Timer 5 High Byte]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/20/2016 15:57:36 PAGE 12  

 681   1      
 682   1              // $[TMR5L - Timer 5 Low Byte]
 683   1              // [TMR5L - Timer 5 Low Byte]$
 684   1      
 685   1              // $[TMR5RLH - Timer 5 Reload High Byte]
 686   1              // [TMR5RLH - Timer 5 Reload High Byte]$
 687   1      
 688   1              // $[TMR5RLL - Timer 5 Reload Low Byte]
 689   1              // [TMR5RLL - Timer 5 Reload Low Byte]$
 690   1      
 691   1              // $[TMR5CN0]
 692   1              // [TMR5CN0]$
 693   1      
 694   1              // $[Timer Restoration]
 695   1              // Restore Timer Configuration
 696   1              TMR5CN0 |= TMR5CN0_TR5_save;
 697   1              // [Timer Restoration]$
 698   1      
 699   1      }
 700          
 701          extern void PCACH_1_enter_DefaultMode_from_RESET(void) {
 702   1              // $[PCA0 Settings Save]
 703   1              // Select Capture/Compare register)
 704   1              PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 705   1              // [PCA0 Settings Save]$
 706   1      
 707   1              // $[PCA0CPM1 - PCA Channel 1 Capture/Compare Mode]
 708   1              // [PCA0CPM1 - PCA Channel 1 Capture/Compare Mode]$
 709   1      
 710   1              // $[PCA0CPL1 - PCA Channel 1 Capture Module Low Byte]
 711   1              // [PCA0CPL1 - PCA Channel 1 Capture Module Low Byte]$
 712   1      
 713   1              // $[PCA0CPH1 - PCA Channel 1 Capture Module High Byte]
 714   1              /*
 715   1               // PCA Channel 1 Capture Module High Byte = 0x01
 716   1               */
 717   1              PCA0CPH1 = (0x01 << PCA0CPH1_PCA0CPH1__SHIFT);
 718   1              // [PCA0CPH1 - PCA Channel 1 Capture Module High Byte]$
 719   1      
 720   1              // $[Auto-reload]
 721   1              // [Auto-reload]$
 722   1      
 723   1              // $[PCA0 Settings Restore]
 724   1              // [PCA0 Settings Restore]$
 725   1      
 726   1      }
 727          
 728          extern void DAC_0_enter_DefaultMode_from_RESET(void) {
 729   1              // $[DAC0CF0 - DAC0 Configuration 0]
 730   1              /*
 731   1               // DAC0 is enabled and will drive the output pin
 732   1               // DAC0 output updates occur on every clock cycle
 733   1               // DAC0 input is treated as right-justified
 734   1               // All resets will reset DAC0 and its associated registers
 735   1               */
 736   1              SFRPAGE = 0x30;
 737   1              DAC0CF0 = DAC0CF0_EN__ENABLE | DAC0CF0_UPDATE__SYSCLK
 738   1                              | DAC0CF0_LJST__RIGHT_JUSTIFY | DAC0CF0_RSTMD__NORMAL;
 739   1              // [DAC0CF0 - DAC0 Configuration 0]$
 740   1      
 741   1              // $[DAC0CF1 - DAC0 Configuration 1]
 742   1              // [DAC0CF1 - DAC0 Configuration 1]$
 743   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/20/2016 15:57:36 PAGE 13  

 744   1      }
 745          
 746          extern void DACGCF_0_enter_DefaultMode_from_RESET(void) {
 747   1              // $[DACGCF0 - DAC Global Configuration 0]
 748   1              /*
 749   1               // Select the VREF pin
 750   1               // Select the VDD supply
 751   1               // Input = DAC1H:DAC1L
 752   1               // Input = DAC3H:DAC3L
 753   1               // DAC1 always updates from the data source selected in D1SRC. This mode
 754   1               //     may be used with any trigger source
 755   1               // DAC3 always updates from the data source selected in D3SRC. This mode
 756   1               //     may be used with any trigger source
 757   1               */
 758   1              DACGCF0 = DACGCF0_D01REFSL__VREF | DACGCF0_D23REFSL__VDD
 759   1                              | DACGCF0_D1SRC__DAC1 | DACGCF0_D3SRC__DAC3 | DACGCF0_D1AMEN__NORMAL
 760   1                              | DACGCF0_D3AMEN__NORMAL;
 761   1              // [DACGCF0 - DAC Global Configuration 0]$
 762   1      
 763   1              // $[DACGCF2 - DAC Global Configuration 2]
 764   1              // [DACGCF2 - DAC Global Configuration 2]$
 765   1      
 766   1      }
 767          
 768          extern void VREF_0_enter_DefaultMode_from_RESET(void) {
 769   1              // $[REF0CN - Voltage Reference Control]
 770   1              /*
 771   1               // 2.4 V reference output to VREF pin
 772   1               */
 773   1              SFRPAGE = 0x00;
 774   1              REF0CN = REF0CN_VREFSL__VREF_2P4;
 775   1              // [REF0CN - Voltage Reference Control]$
 776   1      
 777   1      }
 778          
 779          extern void PORTS_1_enter_DefaultMode_from_RESET(void) {
 780   1              // $[P1 - Port 1 Pin Latch]
 781   1              /*
 782   1               // P1.0 is high. Set P1.0 to drive or float high
 783   1               // P1.1 is low. Set P1.1 to drive low
 784   1               // P1.2 is high. Set P1.2 to drive or float high
 785   1               // P1.3 is low. Set P1.3 to drive low
 786   1               // P1.4 is high. Set P1.4 to drive or float high
 787   1               // P1.5 is high. Set P1.5 to drive or float high
 788   1               // P1.6 is high. Set P1.6 to drive or float high
 789   1               // P1.7 is high. Set P1.7 to drive or float high
 790   1               */
 791   1              P1 = P1_B0__HIGH | P1_B1__LOW | P1_B2__HIGH | P1_B3__LOW | P1_B4__HIGH
 792   1                              | P1_B5__HIGH | P1_B6__HIGH | P1_B7__HIGH;
 793   1              // [P1 - Port 1 Pin Latch]$
 794   1      
 795   1              // $[P1MDOUT - Port 1 Output Mode]
 796   1              // [P1MDOUT - Port 1 Output Mode]$
 797   1      
 798   1              // $[P1MDIN - Port 1 Input Mode]
 799   1              /*
 800   1               // P1.0 pin is configured for digital mode
 801   1               // P1.1 pin is configured for digital mode
 802   1               // P1.2 pin is configured for digital mode
 803   1               // P1.3 pin is configured for digital mode
 804   1               // P1.4 pin is configured for digital mode
 805   1               // P1.5 pin is configured for digital mode
 806   1               // P1.6 pin is configured for digital mode
C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/20/2016 15:57:36 PAGE 14  

 807   1               // P1.7 pin is configured for analog mode
 808   1               */
 809   1              P1MDIN = P1MDIN_B0__DIGITAL | P1MDIN_B1__DIGITAL | P1MDIN_B2__DIGITAL
 810   1                              | P1MDIN_B3__DIGITAL | P1MDIN_B4__DIGITAL | P1MDIN_B5__DIGITAL
 811   1                              | P1MDIN_B6__DIGITAL | P1MDIN_B7__ANALOG;
 812   1              // [P1MDIN - Port 1 Input Mode]$
 813   1      
 814   1              // $[P1SKIP - Port 1 Skip]
 815   1              /*
 816   1               // P1.0 pin is not skipped by the crossbar
 817   1               // P1.1 pin is not skipped by the crossbar
 818   1               // P1.2 pin is not skipped by the crossbar
 819   1               // P1.3 pin is not skipped by the crossbar
 820   1               // P1.4 pin is not skipped by the crossbar
 821   1               // P1.5 pin is not skipped by the crossbar
 822   1               // P1.6 pin is not skipped by the crossbar
 823   1               // P1.7 pin is skipped by the crossbar
 824   1               */
 825   1              P1SKIP = P1SKIP_B0__NOT_SKIPPED | P1SKIP_B1__NOT_SKIPPED
 826   1                              | P1SKIP_B2__NOT_SKIPPED | P1SKIP_B3__NOT_SKIPPED
 827   1                              | P1SKIP_B4__NOT_SKIPPED | P1SKIP_B5__NOT_SKIPPED
 828   1                              | P1SKIP_B6__NOT_SKIPPED | P1SKIP_B7__SKIPPED;
 829   1              // [P1SKIP - Port 1 Skip]$
 830   1      
 831   1              // $[P1MASK - Port 1 Mask]
 832   1              // [P1MASK - Port 1 Mask]$
 833   1      
 834   1              // $[P1MAT - Port 1 Match]
 835   1              /*
 836   1               // P1.0 pin logic value is compared with logic HIGH
 837   1               // P1.1 pin logic value is compared with logic LOW
 838   1               // P1.2 pin logic value is compared with logic HIGH
 839   1               // P1.3 pin logic value is compared with logic LOW
 840   1               // P1.4 pin logic value is compared with logic HIGH
 841   1               // P1.5 pin logic value is compared with logic HIGH
 842   1               // P1.6 pin logic value is compared with logic HIGH
 843   1               // P1.7 pin logic value is compared with logic HIGH
 844   1               */
 845   1              P1MAT = P1MAT_B0__HIGH | P1MAT_B1__LOW | P1MAT_B2__HIGH | P1MAT_B3__LOW
 846   1                              | P1MAT_B4__HIGH | P1MAT_B5__HIGH | P1MAT_B6__HIGH | P1MAT_B7__HIGH;
 847   1              // [P1MAT - Port 1 Match]$
 848   1      
 849   1      }
 850          
 851          extern void ADC_0_enter_DefaultMode_from_RESET(void) {
 852   1              // $[ADC0CN2 - ADC0 Control 2]
 853   1              /*
 854   1               // ADC0 conversion initiated on overflow of Timer 2
 855   1               // The ADC accumulator always adds new results to the existing output.
 856   1               //     The accumulator is never cleared in this mode
 857   1               */
 858   1              ADC0CN2 = ADC0CN2_ADCM__TIMER2 | ADC0CN2_PACEN__PAC_ENABLED;
 859   1              // [ADC0CN2 - ADC0 Control 2]$
 860   1      
 861   1              // $[ADC0CN1 - ADC0 Control 1]
 862   1              /*
 863   1               // ADC0 operates in 12-bit mode
 864   1               // Right justified. No shifting applied
 865   1               // Perform and Accumulate 16 conversions
 866   1               */
 867   1              ADC0CN1 = ADC0CN1_ADBITS__12_BIT | ADC0CN1_ADSJST__RIGHT_NO_SHIFT
 868   1                              | ADC0CN1_ADRPT__ACC_16;
 869   1              // [ADC0CN1 - ADC0 Control 1]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/20/2016 15:57:36 PAGE 15  

 870   1      
 871   1              // $[ADC0MX - ADC0 Multiplexer Selection]
 872   1              /*
 873   1               // Select ADC0.13
 874   1               */
 875   1              ADC0MX = ADC0MX_ADC0MX__ADC0P13;
 876   1              // [ADC0MX - ADC0 Multiplexer Selection]$
 877   1      
 878   1              // $[ADC0CF2 - ADC0 Power Control]
 879   1              /*
 880   1               // The ADC0 ground reference is the GND pin
 881   1               // The ADC0 voltage reference is the VDD pin
 882   1               // Power Up Delay Time = 0x1F
 883   1               */
 884   1              ADC0CF2 = ADC0CF2_GNDSL__GND_PIN | ADC0CF2_REFSL__VDD_PIN
 885   1                              | (0x1F << ADC0CF2_ADPWR__SHIFT);
 886   1              // [ADC0CF2 - ADC0 Power Control]$
 887   1      
 888   1              // $[ADC0CF0 - ADC0 Configuration]
 889   1              /*
 890   1               // ADCCLK = SYSCLK
 891   1               // SAR Clock Divider = 0x03
 892   1               */
 893   1              ADC0CF0 = ADC0CF0_ADCLKSEL__SYSCLK | (0x03 << ADC0CF0_ADSC__SHIFT);
 894   1              // [ADC0CF0 - ADC0 Configuration]$
 895   1      
 896   1              // $[ADC0CF1 - ADC0 Configuration]
 897   1              /*
 898   1               // Enable low power mode
 899   1               // Conversion Tracking Time = 0x0A
 900   1               */
 901   1              ADC0CF1 = ADC0CF1_ADLPM__LP_ENABLED | (0x0A << ADC0CF1_ADTK__SHIFT);
 902   1              // [ADC0CF1 - ADC0 Configuration]$
 903   1      
 904   1              // $[ADC0ASAL - ADC0 Autoscan Start Address Low Byte]
 905   1              /*
 906   1               // ADC results in XRAM are stored in little-endian order. This will
 907   1               //     result in the most significant byte stored in the odd-numbered address
 908   1               */
 909   1              SFRPAGE = 0x30;
 910   1              ADC0ASAL |= ADC0ASAL_ENDIAN__LITTLE_ENDIAN;
 911   1              // [ADC0ASAL - ADC0 Autoscan Start Address Low Byte]$
 912   1      
 913   1              // $[ADC0GTH - ADC0 Greater-Than High Byte]
 914   1              // [ADC0GTH - ADC0 Greater-Than High Byte]$
 915   1      
 916   1              // $[ADC0GTL - ADC0 Greater-Than Low Byte]
 917   1              // [ADC0GTL - ADC0 Greater-Than Low Byte]$
 918   1      
 919   1              // $[ADC0LTH - ADC0 Less-Than High Byte]
 920   1              // [ADC0LTH - ADC0 Less-Than High Byte]$
 921   1      
 922   1              // $[ADC0LTL - ADC0 Less-Than Low Byte]
 923   1              // [ADC0LTL - ADC0 Less-Than Low Byte]$
 924   1      
 925   1              // $[ADC0ASCF - ADC0 Autoscan Configuration]
 926   1              /*
 927   1               // The selected conversion trigger source will begin each scan cycle. All
 928   1               //     conversions within a scan cycle are performed automatically when the
 929   1               //     previous conversion is complete
 930   1               */
 931   1              ADC0ASCF |= ADC0ASCF_STEN__SINGLE_TRIGGER;
 932   1              // [ADC0ASCF - ADC0 Autoscan Configuration]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/20/2016 15:57:36 PAGE 16  

 933   1      
 934   1              // $[ADC0CN0 - ADC0 Control 0]
 935   1              /*
 936   1               // Enable ADC0 
 937   1               */
 938   1              SFRPAGE = 0x00;
 939   1              ADC0CN0 |= ADC0CN0_ADEN__ENABLED;
 940   1              // [ADC0CN0 - ADC0 Control 0]$
 941   1      
 942   1      }
 943          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    376    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
