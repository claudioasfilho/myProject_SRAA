C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/13/2016 14:13:52 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\clfilho
                    -\SimplicityStudio\v3_workspace\myProject - DAC Enabled\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNING
                    -LEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:/Users/clfilho/SimplicityStudio/v3_worksp
                    -ace/myProject - DAC Enabled/inc;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/shared/si8051Base;C:
                    -/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/EFM8BB3;C:/SiliconLabs/SimplicityStudio/v3/developer/s
                    -dks/si8051/v3//Device/EFM8BB3/inc) PRINT(.\src\InitDevice.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\InitDevic
                    -e.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8BB3_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void enter_DefaultMode_from_RESET(void) {
  23   1              // $[Config Calls]
  24   1              // Save the SFRPAGE
  25   1              uint8_t SFRPAGE_save = SFRPAGE;
  26   1              WDT_0_enter_DefaultMode_from_RESET();
  27   1              PORTS_0_enter_DefaultMode_from_RESET();
  28   1              PORTS_1_enter_DefaultMode_from_RESET();
  29   1              PORTS_3_enter_DefaultMode_from_RESET();
  30   1              PBCFG_0_enter_DefaultMode_from_RESET();
  31   1              CMP_0_enter_DefaultMode_from_RESET();
  32   1              DAC_0_enter_DefaultMode_from_RESET();
  33   1              DACGCF_0_enter_DefaultMode_from_RESET();
  34   1              VREF_0_enter_DefaultMode_from_RESET();
  35   1              HFOSC_0_enter_DefaultMode_from_RESET();
  36   1              CLOCK_0_enter_DefaultMode_from_RESET();
  37   1              TIMER01_0_enter_DefaultMode_from_RESET();
  38   1              TIMER16_4_enter_DefaultMode_from_RESET();
  39   1              TIMER16_5_enter_DefaultMode_from_RESET();
  40   1              TIMER_SETUP_0_enter_DefaultMode_from_RESET();
  41   1              PCA_0_enter_DefaultMode_from_RESET();
  42   1              PCACH_0_enter_DefaultMode_from_RESET();
  43   1              PCACH_1_enter_DefaultMode_from_RESET();
  44   1              INTERRUPT_0_enter_DefaultMode_from_RESET();
  45   1              // Restore the SFRPAGE
  46   1              SFRPAGE = SFRPAGE_save;
  47   1              // [Config Calls]$
  48   1      
  49   1      }
  50          
C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/13/2016 14:13:52 PAGE 2   

  51          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
  52   1              // $[XBR2 - Port I/O Crossbar 2]
  53   1              /*
  54   1               // Weak Pullups enabled 
  55   1               // Crossbar enabled
  56   1               // UART1 I/O unavailable at Port pin
  57   1               // UART1 RTS1 unavailable at Port pin
  58   1               // UART1 CTS1 unavailable at Port pin
  59   1               */
  60   1              SFRPAGE = 0x00;
  61   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED
  62   1                              | XBR2_URT1E__DISABLED | XBR2_URT1RTSE__DISABLED
  63   1                              | XBR2_URT1CTSE__DISABLED;
  64   1              // [XBR2 - Port I/O Crossbar 2]$
  65   1      
  66   1              // $[PRTDRV - Port Drive Strength]
  67   1              // [PRTDRV - Port Drive Strength]$
  68   1      
  69   1              // $[XBR0 - Port I/O Crossbar 0]
  70   1              // [XBR0 - Port I/O Crossbar 0]$
  71   1      
  72   1              // $[XBR1 - Port I/O Crossbar 1]
  73   1              /*
  74   1               // CEX0 routed to Port pin
  75   1               // ECI unavailable at Port pin
  76   1               // T0 unavailable at Port pin
  77   1               // T1 routed to Port pin
  78   1               // T2 unavailable at Port pin
  79   1               */
  80   1              XBR1 = XBR1_PCA0ME__CEX0 | XBR1_ECIE__DISABLED | XBR1_T0E__DISABLED
  81   1                              | XBR1_T1E__ENABLED | XBR1_T2E__DISABLED;
  82   1              // [XBR1 - Port I/O Crossbar 1]$
  83   1      
  84   1      }
  85          
  86          extern void CMP_0_enter_DefaultMode_from_RESET(void) {
  87   1              // $[CMP0MX - Comparator 0 Multiplexer Selection]
  88   1              /*
  89   1               // External pin CMP0P.1
  90   1               // External pin CMP0N.15
  91   1               */
  92   1              uint8_t delay;
  93   1      
  94   1              CMP0MX = CMP0MX_CMXP__CMP0P1 | CMP0MX_CMXN__CMP0N15;
  95   1              // Delay to allow the comparator inputs to settle
  96   1              for (delay = 0; delay < 0x20; delay++)
  97   1                      ;
  98   1              // [CMP0MX - Comparator 0 Multiplexer Selection]$
  99   1      
 100   1              // $[CMP0CN1 - Comparator 0 Control 1]
 101   1              /*
 102   1               // Internal Comparator DAC Reference Level = 0x1F
 103   1               // The comparator output will always reflect the input conditions
 104   1               */
 105   1              SFRPAGE = 0x30;
 106   1              CMP0CN1 = (0x1F << CMP0CN1_DACLVL__SHIFT) | CMP0CN1_CPINH__DISABLED;
 107   1              // [CMP0CN1 - Comparator 0 Control 1]$
 108   1      
 109   1              // $[CMP0MD - Comparator 0 Mode]
 110   1              /*
 111   1               // Mode 0 
 112   1               // Connect the CMP- input to the internal DAC output, and CMP+ is
 113   1               //     selected by CMXP. The internal DAC uses the signal specified by CMXN
C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/13/2016 14:13:52 PAGE 3   

 114   1               //     as its full-scale reference
 115   1               // Output is inverted
 116   1               */
 117   1              SFRPAGE = 0x00;
 118   1              CMP0MD &= ~CMP0MD_CPMD__FMASK;
 119   1              CMP0MD |= CMP0MD_INSL__CMXP_DAC | CMP0MD_CPINV__INVERT;
 120   1              // [CMP0MD - Comparator 0 Mode]$
 121   1      
 122   1              // $[CMP0CN0 - Comparator 0 Control 0]
 123   1              /*
 124   1               // Comparator enabled
 125   1               */
 126   1              CMP0CN0 |= CMP0CN0_CPEN__ENABLED;
 127   1              // [CMP0CN0 - Comparator 0 Control 0]$
 128   1      
 129   1      }
 130          
 131          extern void HFOSC_0_enter_DefaultMode_from_RESET(void) {
 132   1              // $[HFOCN - High Frequency Oscillator Control]
 133   1              /*
 134   1               // Force High Frequency Oscillator 0 to run
 135   1               // Disable High Frequency Oscillator 1 
 136   1               */
 137   1              SFRPAGE = 0x10;
 138   1              HFOCN = HFOCN_HFO0EN__ENABLED | HFOCN_HFO1EN__DISABLED;
 139   1              // [HFOCN - High Frequency Oscillator Control]$
 140   1      
 141   1      }
 142          
 143          extern void PORTS_0_enter_DefaultMode_from_RESET(void) {
 144   1              // $[P0 - Port 0 Pin Latch]
 145   1              /*
 146   1               // P0.0 is high. Set P0.0 to drive or float high
 147   1               // P0.1 is high. Set P0.1 to drive or float high
 148   1               // P0.2 is high. Set P0.2 to drive or float high
 149   1               // P0.3 is low. Set P0.3 to drive low
 150   1               // P0.4 is high. Set P0.4 to drive or float high
 151   1               // P0.5 is low. Set P0.5 to drive low
 152   1               // P0.6 is high. Set P0.6 to drive or float high
 153   1               // P0.7 is high. Set P0.7 to drive or float high
 154   1               */
 155   1              P0 = P0_B0__HIGH | P0_B1__HIGH | P0_B2__HIGH | P0_B3__LOW | P0_B4__HIGH
 156   1                              | P0_B5__LOW | P0_B6__HIGH | P0_B7__HIGH;
 157   1              // [P0 - Port 0 Pin Latch]$
 158   1      
 159   1              // $[P0MDOUT - Port 0 Output Mode]
 160   1              /*
 161   1               // P0.0 output is open-drain
 162   1               // P0.1 output is push-pull
 163   1               // P0.2 output is open-drain
 164   1               // P0.3 output is open-drain
 165   1               // P0.4 output is open-drain
 166   1               // P0.5 output is open-drain
 167   1               // P0.6 output is open-drain
 168   1               // P0.7 output is open-drain
 169   1               */
 170   1              P0MDOUT = P0MDOUT_B0__OPEN_DRAIN | P0MDOUT_B1__PUSH_PULL
 171   1                              | P0MDOUT_B2__OPEN_DRAIN | P0MDOUT_B3__OPEN_DRAIN
 172   1                              | P0MDOUT_B4__OPEN_DRAIN | P0MDOUT_B5__OPEN_DRAIN
 173   1                              | P0MDOUT_B6__OPEN_DRAIN | P0MDOUT_B7__OPEN_DRAIN;
 174   1              // [P0MDOUT - Port 0 Output Mode]$
 175   1      
 176   1              // $[P0MDIN - Port 0 Input Mode]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/13/2016 14:13:52 PAGE 4   

 177   1              /*
 178   1               // P0.0 pin is configured for analog mode
 179   1               // P0.1 pin is configured for digital mode
 180   1               // P0.2 pin is configured for analog mode
 181   1               // P0.3 pin is configured for digital mode
 182   1               // P0.4 pin is configured for digital mode
 183   1               // P0.5 pin is configured for digital mode
 184   1               // P0.6 pin is configured for digital mode
 185   1               // P0.7 pin is configured for digital mode
 186   1               */
 187   1              P0MDIN = P0MDIN_B0__ANALOG | P0MDIN_B1__DIGITAL | P0MDIN_B2__ANALOG
 188   1                              | P0MDIN_B3__DIGITAL | P0MDIN_B4__DIGITAL | P0MDIN_B5__DIGITAL
 189   1                              | P0MDIN_B6__DIGITAL | P0MDIN_B7__DIGITAL;
 190   1              // [P0MDIN - Port 0 Input Mode]$
 191   1      
 192   1              // $[P0SKIP - Port 0 Skip]
 193   1              /*
 194   1               // P0.0 pin is skipped by the crossbar
 195   1               // P0.1 pin is not skipped by the crossbar
 196   1               // P0.2 pin is skipped by the crossbar
 197   1               // P0.3 pin is not skipped by the crossbar
 198   1               // P0.4 pin is not skipped by the crossbar
 199   1               // P0.5 pin is not skipped by the crossbar
 200   1               // P0.6 pin is not skipped by the crossbar
 201   1               // P0.7 pin is not skipped by the crossbar
 202   1               */
 203   1              P0SKIP = P0SKIP_B0__SKIPPED | P0SKIP_B1__NOT_SKIPPED | P0SKIP_B2__SKIPPED
 204   1                              | P0SKIP_B3__NOT_SKIPPED | P0SKIP_B4__NOT_SKIPPED
 205   1                              | P0SKIP_B5__NOT_SKIPPED | P0SKIP_B6__NOT_SKIPPED
 206   1                              | P0SKIP_B7__NOT_SKIPPED;
 207   1              // [P0SKIP - Port 0 Skip]$
 208   1      
 209   1              // $[P0MASK - Port 0 Mask]
 210   1              // [P0MASK - Port 0 Mask]$
 211   1      
 212   1              // $[P0MAT - Port 0 Match]
 213   1              /*
 214   1               // P0.0 pin logic value is compared with logic HIGH
 215   1               // P0.1 pin logic value is compared with logic HIGH
 216   1               // P0.2 pin logic value is compared with logic HIGH
 217   1               // P0.3 pin logic value is compared with logic LOW
 218   1               // P0.4 pin logic value is compared with logic HIGH
 219   1               // P0.5 pin logic value is compared with logic LOW
 220   1               // P0.6 pin logic value is compared with logic HIGH
 221   1               // P0.7 pin logic value is compared with logic HIGH
 222   1               */
 223   1              P0MAT = P0MAT_B0__HIGH | P0MAT_B1__HIGH | P0MAT_B2__HIGH | P0MAT_B3__LOW
 224   1                              | P0MAT_B4__HIGH | P0MAT_B5__LOW | P0MAT_B6__HIGH | P0MAT_B7__HIGH;
 225   1              // [P0MAT - Port 0 Match]$
 226   1      
 227   1      }
 228          
 229          extern void CLOCK_0_enter_DefaultMode_from_RESET(void) {
 230   1              // $[HFOSC1 Setup]
 231   1              // [HFOSC1 Setup]$
 232   1      
 233   1              // $[CLKSEL - Clock Select]
 234   1              /*
 235   1               // Clock derived from the Internal High Frequency Oscillator 0
 236   1               // SYSCLK is equal to selected clock source divided by 1
 237   1               */
 238   1              SFRPAGE = 0x00;
 239   1              CLKSEL = CLKSEL_CLKSL__HFOSC0 | CLKSEL_CLKDIV__SYSCLK_DIV_1;
C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/13/2016 14:13:52 PAGE 5   

 240   1              while ((CLKSEL & CLKSEL_DIVRDY__BMASK) == CLKSEL_DIVRDY__NOT_READY)
 241   1                      ;
 242   1              // [CLKSEL - Clock Select]$
 243   1      
 244   1      }
 245          
 246          extern void CIP51_0_enter_DefaultMode_from_RESET(void) {
 247   1              // $[PFE0CN - Prefetch Engine Control]
 248   1              /*
 249   1               // SYSCLK < 50 MHz
 250   1               */
 251   1              PFE0CN = PFE0CN_FLRT__SYSCLK_BELOW_50_MHZ;
 252   1              // [PFE0CN - Prefetch Engine Control]$
 253   1      
 254   1      }
 255          
 256          extern void TIMER16_2_enter_DefaultMode_from_RESET(void) {
 257   1              // $[Timer Initialization]
 258   1              // Save Timer Configuration
 259   1              uint8_t TMR2CN0_TR2_save;
 260   1              TMR2CN0_TR2_save = TMR2CN0 & TMR2CN0_TR2__BMASK;
 261   1              // Stop Timer
 262   1              TMR2CN0 &= ~(TMR2CN0_TR2__BMASK);
 263   1              // [Timer Initialization]$
 264   1      
 265   1              // $[TMR2CN1 - Timer 2 Control 1]
 266   1              /*
 267   1               // Capture high-to-low transitions on the configurable logic unit 0
 268   1               //     synchronous output
 269   1               // Timer will only reload on overflow events
 270   1               */
 271   1              SFRPAGE = 0x10;
 272   1              TMR2CN1 = TMR2CN1_T2CSEL__CLU0_OUT | TMR2CN1_RLFSEL__NONE;
 273   1              // [TMR2CN1 - Timer 2 Control 1]$
 274   1      
 275   1              // $[TMR2CN0 - Timer 2 Control]
 276   1              // [TMR2CN0 - Timer 2 Control]$
 277   1      
 278   1              // $[TMR2H - Timer 2 High Byte]
 279   1              // [TMR2H - Timer 2 High Byte]$
 280   1      
 281   1              // $[TMR2L - Timer 2 Low Byte]
 282   1              // [TMR2L - Timer 2 Low Byte]$
 283   1      
 284   1              // $[TMR2RLH - Timer 2 Reload High Byte]
 285   1              // [TMR2RLH - Timer 2 Reload High Byte]$
 286   1      
 287   1              // $[TMR2RLL - Timer 2 Reload Low Byte]
 288   1              // [TMR2RLL - Timer 2 Reload Low Byte]$
 289   1      
 290   1              // $[TMR2CN0]
 291   1              // [TMR2CN0]$
 292   1      
 293   1              // $[Timer Restoration]
 294   1              // Restore Timer Configuration
 295   1              TMR2CN0 |= TMR2CN0_TR2_save;
 296   1              // [Timer Restoration]$
 297   1      
 298   1      }
 299          
 300          extern void INTERRUPT_0_enter_DefaultMode_from_RESET(void) {
 301   1              // $[EIE1 - Extended Interrupt Enable 1]
 302   1              // [EIE1 - Extended Interrupt Enable 1]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/13/2016 14:13:52 PAGE 6   

 303   1      
 304   1              // $[EIE2 - Extended Interrupt Enable 2]
 305   1              // [EIE2 - Extended Interrupt Enable 2]$
 306   1      
 307   1              // $[EIP1H - Extended Interrupt Priority 1 High]
 308   1              /*
 309   1               // ADC0 Conversion Complete interrupt priority MSB set to low
 310   1               // ADC0 Window interrupt priority MSB set to low
 311   1               // CP0 interrupt priority MSB set to high
 312   1               // CP1 interrupt priority MSB set to low
 313   1               // Port Match interrupt priority MSB set to low
 314   1               // PCA0 interrupt priority MSB set to low
 315   1               // SMB0 interrupt priority MSB set to low
 316   1               // Timer 3 interrupt priority MSB set to low
 317   1               */
 318   1              SFRPAGE = 0x10;
 319   1              EIP1H = EIP1H_PHADC0__LOW | EIP1H_PHWADC0__LOW | EIP1H_PHCP0__HIGH
 320   1                              | EIP1H_PHCP1__LOW | EIP1H_PHMAT__LOW | EIP1H_PHPCA0__LOW
 321   1                              | EIP1H_PHSMB0__LOW | EIP1H_PHT3__LOW;
 322   1              // [EIP1H - Extended Interrupt Priority 1 High]$
 323   1      
 324   1              // $[EIP1 - Extended Interrupt Priority 1 Low]
 325   1              // [EIP1 - Extended Interrupt Priority 1 Low]$
 326   1      
 327   1              // $[EIP2 - Extended Interrupt Priority 2]
 328   1              /*
 329   1               // CL0 interrupt priority LSB set to low
 330   1               // I2C0 Slave interrupt priority LSB set to low
 331   1               // Timer 4 interrupt priority LSB set to high
 332   1               // Timer 5 interrupt priority LSB set to low
 333   1               // UART1 interrupt priority LSB set to low
 334   1               */
 335   1              EIP2 = EIP2_PCL0__LOW | EIP2_PI2C0__LOW | EIP2_PT4__HIGH | EIP2_PT5__LOW
 336   1                              | EIP2_PS1__LOW;
 337   1              // [EIP2 - Extended Interrupt Priority 2]$
 338   1      
 339   1              // $[EIP2H - Extended Interrupt Priority 2 High]
 340   1              // [EIP2H - Extended Interrupt Priority 2 High]$
 341   1      
 342   1              // $[IE - Interrupt Enable]
 343   1              /*
 344   1               // Enable each interrupt according to its individual mask setting
 345   1               // Disable external interrupt 0
 346   1               // Disable external interrupt 1
 347   1               // Disable all SPI0 interrupts
 348   1               // Enable interrupt requests generated by the TF0 flag
 349   1               // Disable all Timer 1 interrupt
 350   1               // Disable Timer 2 interrupt
 351   1               // Disable UART0 interrupt
 352   1               */
 353   1              SFRPAGE = 0x00;
 354   1              IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED
 355   1                              | IE_ESPI0__DISABLED | IE_ET0__ENABLED | IE_ET1__DISABLED
 356   1                              | IE_ET2__DISABLED | IE_ES0__DISABLED;
 357   1              // [IE - Interrupt Enable]$
 358   1      
 359   1              // $[IP - Interrupt Priority]
 360   1              // [IP - Interrupt Priority]$
 361   1      
 362   1              // $[IPH - Interrupt Priority High]
 363   1              // [IPH - Interrupt Priority High]$
 364   1      
 365   1      }
C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/13/2016 14:13:52 PAGE 7   

 366          
 367          extern void PCA_0_enter_DefaultMode_from_RESET(void) {
 368   1              // $[PCA Off]
 369   1              PCA0CN0_CR = PCA0CN0_CR__STOP;
 370   1              // [PCA Off]$
 371   1      
 372   1              // $[PCA0MD - PCA Mode]
 373   1              /*
 374   1               // PCA continues to function normally while the system controller is in
 375   1               //     Idle Mode
 376   1               // Enable a PCA Counter/Timer Overflow interrupt request when CF is set
 377   1               // System clock
 378   1               */
 379   1              PCA0MD = PCA0MD_CIDL__NORMAL | PCA0MD_ECF__OVF_INT_ENABLED
 380   1                              | PCA0MD_CPS__SYSCLK;
 381   1              // [PCA0MD - PCA Mode]$
 382   1      
 383   1              // $[PCA0CENT - PCA Center Alignment Enable]
 384   1              // [PCA0CENT - PCA Center Alignment Enable]$
 385   1      
 386   1              // $[PCA0CLR - PCA Comparator Clear Control]
 387   1              /*
 388   1               // PCA channel
 389   1               // Comparator 0 will be used for the comparator clear function
 390   1               // Enable the comparator clear function on PCA channel 0
 391   1               // Disable the comparator clear function on PCA channel 1
 392   1               // Disable the comparator clear function on PCA channel 2
 393   1               // Disable the comparator clear function on PCA channel 3
 394   1               // Disable the comparator clear function on PCA channel 4
 395   1               // Disable the comparator clear function on PCA channel 5
 396   1               */
 397   1              PCA0CLR = PCA0CLR_CPCPOL__LOW | PCA0CLR_CPCSEL__CMP_0
 398   1                              | PCA0CLR_CPCE0__ENABLED | PCA0CLR_CPCE1__DISABLED
 399   1                              | PCA0CLR_CPCE2__DISABLED | PCA0CLR_CPCE3__DISABLED
 400   1                              | PCA0CLR_CPCE4__DISABLED | PCA0CLR_CPCE5__DISABLED;
 401   1              // [PCA0CLR - PCA Comparator Clear Control]$
 402   1      
 403   1              // $[PCA0L - PCA Counter/Timer Low Byte]
 404   1              /*
 405   1               // PCA Counter/Timer Low Byte = 0x05
 406   1               */
 407   1              PCA0L = (0x05 << PCA0L_PCA0L__SHIFT);
 408   1              // [PCA0L - PCA Counter/Timer Low Byte]$
 409   1      
 410   1              // $[PCA0H - PCA Counter/Timer High Byte]
 411   1              /*
 412   1               // PCA Counter/Timer High Byte = 0xFF
 413   1               */
 414   1              PCA0H = (0xFF << PCA0H_PCA0H__SHIFT);
 415   1              // [PCA0H - PCA Counter/Timer High Byte]$
 416   1      
 417   1              // $[PCA0POL - PCA Output Polarity]
 418   1              // [PCA0POL - PCA Output Polarity]$
 419   1      
 420   1              // $[PCA0PWM - PCA PWM Configuration]
 421   1              // [PCA0PWM - PCA PWM Configuration]$
 422   1      
 423   1              // $[PCA On]
 424   1              PCA0CN0_CR = PCA0CN0_CR__RUN;
 425   1              // [PCA On]$
 426   1      
 427   1      }
 428          
C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/13/2016 14:13:52 PAGE 8   

 429          extern void PCACH_0_enter_DefaultMode_from_RESET(void) {
 430   1              // $[PCA0 Settings Save]
 431   1              // Select Capture/Compare register)
 432   1              PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 433   1              // [PCA0 Settings Save]$
 434   1      
 435   1              // $[PCA0CPM0 - PCA Channel 0 Capture/Compare Mode]
 436   1              /*
 437   1               // Disable negative edge capture
 438   1               // Disable CCF0 interrupts
 439   1               // Enable match function
 440   1               // 16-bit PWM selected
 441   1               // Disable positive edge capture
 442   1               // Enable comparator function
 443   1               // Enable PWM function
 444   1               // Disable toggle function
 445   1               */
 446   1              PCA0CPM0 = PCA0CPM0_CAPN__DISABLED | PCA0CPM0_ECCF__DISABLED
 447   1                              | PCA0CPM0_MAT__ENABLED | PCA0CPM0_PWM16__16_BIT
 448   1                              | PCA0CPM0_CAPP__DISABLED | PCA0CPM0_ECOM__ENABLED
 449   1                              | PCA0CPM0_PWM__ENABLED | PCA0CPM0_TOG__DISABLED;
 450   1              // [PCA0CPM0 - PCA Channel 0 Capture/Compare Mode]$
 451   1      
 452   1              // $[PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]
 453   1              /*
 454   1               // PCA Channel 0 Capture Module Low Byte = 0xFE
 455   1               */
 456   1              PCA0CPL0 = (0xFE << PCA0CPL0_PCA0CPL0__SHIFT);
 457   1              // [PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]$
 458   1      
 459   1              // $[PCA0CPH0 - PCA Channel 0 Capture Module High Byte]
 460   1              /*
 461   1               // PCA Channel 0 Capture Module High Byte = 0x7F
 462   1               */
 463   1              PCA0CPH0 = (0x7F << PCA0CPH0_PCA0CPH0__SHIFT);
 464   1              // [PCA0CPH0 - PCA Channel 0 Capture Module High Byte]$
 465   1      
 466   1              // $[Auto-reload]
 467   1              // [Auto-reload]$
 468   1      
 469   1              // $[PCA0 Settings Restore]
 470   1              // [PCA0 Settings Restore]$
 471   1      
 472   1      }
 473          
 474          extern void WDT_0_enter_DefaultMode_from_RESET(void) {
 475   1              // $[WDTCN - Watchdog Timer Control]
 476   1              SFRPAGE = 0x00;
 477   1              //Disable Watchdog with key sequence
 478   1              WDTCN = 0xDE; //First key
 479   1              WDTCN = 0xAD; //Second key
 480   1              // [WDTCN - Watchdog Timer Control]$
 481   1      
 482   1      }
 483          
 484          extern void TIMER01_0_enter_DefaultMode_from_RESET(void) {
 485   1              // $[Timer Initialization]
 486   1              //Save Timer Configuration
 487   1              uint8_t TCON_save;
 488   1              TCON_save = TCON;
 489   1              //Stop Timers
 490   1              TCON &= ~TCON_TR0__BMASK & ~TCON_TR1__BMASK;
 491   1      
C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/13/2016 14:13:52 PAGE 9   

 492   1              // [Timer Initialization]$
 493   1      
 494   1              // $[TH0 - Timer 0 High Byte]
 495   1              // [TH0 - Timer 0 High Byte]$
 496   1      
 497   1              // $[TL0 - Timer 0 Low Byte]
 498   1              // [TL0 - Timer 0 Low Byte]$
 499   1      
 500   1              // $[TH1 - Timer 1 High Byte]
 501   1              // [TH1 - Timer 1 High Byte]$
 502   1      
 503   1              // $[TL1 - Timer 1 Low Byte]
 504   1              // [TL1 - Timer 1 Low Byte]$
 505   1      
 506   1              // $[Timer Restoration]
 507   1              //Restore Timer Configuration
 508   1              TCON |= (TCON_save & TCON_TR0__BMASK) | (TCON_save & TCON_TR1__BMASK);
 509   1      
 510   1              // [Timer Restoration]$
 511   1      
 512   1      }
 513          
 514          extern void TIMER_SETUP_0_enter_DefaultMode_from_RESET(void) {
 515   1              // $[CKCON0 - Clock Control 0]
 516   1              // [CKCON0 - Clock Control 0]$
 517   1      
 518   1              // $[CKCON1 - Clock Control 1]
 519   1              // [CKCON1 - Clock Control 1]$
 520   1      
 521   1              // $[TMOD - Timer 0/1 Mode]
 522   1              /*
 523   1               // Mode 1, 16-bit Counter/Timer
 524   1               // Mode 1, 16-bit Counter/Timer
 525   1               // Timer Mode. Timer 0 increments on the clock defined by T0M in the
 526   1               //     CKCON0 register
 527   1               // Timer 0 enabled when TR0 = 1 irrespective of INT0 logic level
 528   1               // Counter Mode. Timer 1 increments on high-to-low transitions of an
 529   1               //     external pin
 530   1               // Timer 1 enabled when TR1 = 1 irrespective of INT1 logic level
 531   1               */
 532   1              SFRPAGE = 0x00;
 533   1              TMOD = TMOD_T0M__MODE1 | TMOD_T1M__MODE1 | TMOD_CT0__TIMER
 534   1                              | TMOD_GATE0__DISABLED | TMOD_CT1__COUNTER | TMOD_GATE1__DISABLED;
 535   1              // [TMOD - Timer 0/1 Mode]$
 536   1      
 537   1              // $[TCON - Timer 0/1 Control]
 538   1              /*
 539   1               // Start Timer 0 running
 540   1               */
 541   1              TCON |= TCON_TR0__RUN;
 542   1              // [TCON - Timer 0/1 Control]$
 543   1      
 544   1      }
 545          
 546          extern void PORTS_3_enter_DefaultMode_from_RESET(void) {
 547   1              // $[P3 - Port 3 Pin Latch]
 548   1              // [P3 - Port 3 Pin Latch]$
 549   1      
 550   1              // $[P3MDOUT - Port 3 Output Mode]
 551   1              /*
 552   1               // P3.0 output is open-drain
 553   1               // P3.1 output is open-drain
 554   1               // P3.2 output is open-drain
C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/13/2016 14:13:52 PAGE 10  

 555   1               // P3.3 output is push-pull
 556   1               // P3.4 output is open-drain
 557   1               // P3.7 output is open-drain
 558   1               */
 559   1              SFRPAGE = 0x20;
 560   1              P3MDOUT = P3MDOUT_B0__OPEN_DRAIN | P3MDOUT_B1__OPEN_DRAIN
 561   1                              | P3MDOUT_B2__OPEN_DRAIN | P3MDOUT_B3__PUSH_PULL
 562   1                              | P3MDOUT_B4__OPEN_DRAIN | P3MDOUT_B7__OPEN_DRAIN;
 563   1              // [P3MDOUT - Port 3 Output Mode]$
 564   1      
 565   1              // $[P3MDIN - Port 3 Input Mode]
 566   1              /*
 567   1               // P3.0 pin is configured for analog mode
 568   1               // P3.1 pin is configured for digital mode
 569   1               // P3.2 pin is configured for digital mode
 570   1               // P3.3 pin is configured for digital mode
 571   1               // P3.4 pin is configured for digital mode
 572   1               // P3.7 pin is configured for digital mode
 573   1               */
 574   1              P3MDIN = P3MDIN_B0__ANALOG | P3MDIN_B1__DIGITAL | P3MDIN_B2__DIGITAL
 575   1                              | P3MDIN_B3__DIGITAL | P3MDIN_B4__DIGITAL | P3MDIN_B7__DIGITAL;
 576   1              // [P3MDIN - Port 3 Input Mode]$
 577   1      
 578   1      }
 579          
 580          extern void TIMER16_4_enter_DefaultMode_from_RESET(void) {
 581   1              // $[Timer Initialization]
 582   1              // Save Timer Configuration
 583   1              uint8_t TMR4CN0_TR4_save;
 584   1              SFRPAGE = 0x10;
 585   1              TMR4CN0_TR4_save = TMR4CN0 & TMR4CN0_TR4__BMASK;
 586   1              // Stop Timer
 587   1              TMR4CN0 &= ~(TMR4CN0_TR4__BMASK);
 588   1              // [Timer Initialization]$
 589   1      
 590   1              // $[TMR4CN1 - Timer 4 Control 1]
 591   1              // [TMR4CN1 - Timer 4 Control 1]$
 592   1      
 593   1              // $[TMR4CN0 - Timer 4 Control]
 594   1              // [TMR4CN0 - Timer 4 Control]$
 595   1      
 596   1              // $[TMR4H - Timer 4 High Byte]
 597   1              // [TMR4H - Timer 4 High Byte]$
 598   1      
 599   1              // $[TMR4L - Timer 4 Low Byte]
 600   1              // [TMR4L - Timer 4 Low Byte]$
 601   1      
 602   1              // $[TMR4RLH - Timer 4 Reload High Byte]
 603   1              /*
 604   1               // Timer 4 Reload High Byte = 0xF8
 605   1               */
 606   1              TMR4RLH = (0xF8 << TMR4RLH_TMR4RLH__SHIFT);
 607   1              // [TMR4RLH - Timer 4 Reload High Byte]$
 608   1      
 609   1              // $[TMR4RLL - Timer 4 Reload Low Byte]
 610   1              /*
 611   1               // Timer 4 Reload Low Byte = 0x07
 612   1               */
 613   1              TMR4RLL = (0x07 << TMR4RLL_TMR4RLL__SHIFT);
 614   1              // [TMR4RLL - Timer 4 Reload Low Byte]$
 615   1      
 616   1              // $[TMR4CN0]
 617   1              // [TMR4CN0]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/13/2016 14:13:52 PAGE 11  

 618   1      
 619   1              // $[Timer Restoration]
 620   1              // Restore Timer Configuration
 621   1              TMR4CN0 |= TMR4CN0_TR4_save;
 622   1              // [Timer Restoration]$
 623   1      
 624   1      }
 625          
 626          extern void TIMER16_5_enter_DefaultMode_from_RESET(void) {
 627   1              // $[Timer Initialization]
 628   1              // Save Timer Configuration
 629   1              uint8_t TMR5CN0_TR5_save;
 630   1              TMR5CN0_TR5_save = TMR5CN0 & TMR5CN0_TR5__BMASK;
 631   1              // Stop Timer
 632   1              TMR5CN0 &= ~(TMR5CN0_TR5__BMASK);
 633   1              // [Timer Initialization]$
 634   1      
 635   1              // $[TMR5CN1 - Timer 5 Control 1]
 636   1              // [TMR5CN1 - Timer 5 Control 1]$
 637   1      
 638   1              // $[TMR5CN0 - Timer 5 Control]
 639   1              // [TMR5CN0 - Timer 5 Control]$
 640   1      
 641   1              // $[TMR5H - Timer 5 High Byte]
 642   1              // [TMR5H - Timer 5 High Byte]$
 643   1      
 644   1              // $[TMR5L - Timer 5 Low Byte]
 645   1              // [TMR5L - Timer 5 Low Byte]$
 646   1      
 647   1              // $[TMR5RLH - Timer 5 Reload High Byte]
 648   1              // [TMR5RLH - Timer 5 Reload High Byte]$
 649   1      
 650   1              // $[TMR5RLL - Timer 5 Reload Low Byte]
 651   1              // [TMR5RLL - Timer 5 Reload Low Byte]$
 652   1      
 653   1              // $[TMR5CN0]
 654   1              // [TMR5CN0]$
 655   1      
 656   1              // $[Timer Restoration]
 657   1              // Restore Timer Configuration
 658   1              TMR5CN0 |= TMR5CN0_TR5_save;
 659   1              // [Timer Restoration]$
 660   1      
 661   1      }
 662          
 663          extern void PCACH_1_enter_DefaultMode_from_RESET(void) {
 664   1              // $[PCA0 Settings Save]
 665   1              // Select Capture/Compare register)
 666   1              PCA0PWM &= ~PCA0PWM_ARSEL__BMASK;
 667   1              // [PCA0 Settings Save]$
 668   1      
 669   1              // $[PCA0CPM1 - PCA Channel 1 Capture/Compare Mode]
 670   1              // [PCA0CPM1 - PCA Channel 1 Capture/Compare Mode]$
 671   1      
 672   1              // $[PCA0CPL1 - PCA Channel 1 Capture Module Low Byte]
 673   1              // [PCA0CPL1 - PCA Channel 1 Capture Module Low Byte]$
 674   1      
 675   1              // $[PCA0CPH1 - PCA Channel 1 Capture Module High Byte]
 676   1              /*
 677   1               // PCA Channel 1 Capture Module High Byte = 0x01
 678   1               */
 679   1              PCA0CPH1 = (0x01 << PCA0CPH1_PCA0CPH1__SHIFT);
 680   1              // [PCA0CPH1 - PCA Channel 1 Capture Module High Byte]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/13/2016 14:13:52 PAGE 12  

 681   1      
 682   1              // $[Auto-reload]
 683   1              // [Auto-reload]$
 684   1      
 685   1              // $[PCA0 Settings Restore]
 686   1              // [PCA0 Settings Restore]$
 687   1      
 688   1      }
 689          
 690          extern void DAC_0_enter_DefaultMode_from_RESET(void) {
 691   1              // $[DAC0CF0 - DAC0 Configuration 0]
 692   1              /*
 693   1               // DAC0 is enabled and will drive the output pin
 694   1               // DAC0 output updates occur on every clock cycle
 695   1               // DAC0 input is treated as right-justified
 696   1               // All resets will reset DAC0 and its associated registers
 697   1               */
 698   1              SFRPAGE = 0x30;
 699   1              DAC0CF0 = DAC0CF0_EN__ENABLE | DAC0CF0_UPDATE__SYSCLK
 700   1                              | DAC0CF0_LJST__RIGHT_JUSTIFY | DAC0CF0_RSTMD__NORMAL;
 701   1              // [DAC0CF0 - DAC0 Configuration 0]$
 702   1      
 703   1              // $[DAC0CF1 - DAC0 Configuration 1]
 704   1              // [DAC0CF1 - DAC0 Configuration 1]$
 705   1      
 706   1      }
 707          
 708          extern void DACGCF_0_enter_DefaultMode_from_RESET(void) {
 709   1              // $[DACGCF0 - DAC Global Configuration 0]
 710   1              /*
 711   1               // Select the VREF pin
 712   1               // Select the VDD supply
 713   1               // Input = DAC1H:DAC1L
 714   1               // Input = DAC3H:DAC3L
 715   1               // DAC1 always updates from the data source selected in D1SRC. This mode
 716   1               //     may be used with any trigger source
 717   1               // DAC3 always updates from the data source selected in D3SRC. This mode
 718   1               //     may be used with any trigger source
 719   1               */
 720   1              DACGCF0 = DACGCF0_D01REFSL__VREF | DACGCF0_D23REFSL__VDD
 721   1                              | DACGCF0_D1SRC__DAC1 | DACGCF0_D3SRC__DAC3 | DACGCF0_D1AMEN__NORMAL
 722   1                              | DACGCF0_D3AMEN__NORMAL;
 723   1              // [DACGCF0 - DAC Global Configuration 0]$
 724   1      
 725   1              // $[DACGCF2 - DAC Global Configuration 2]
 726   1              // [DACGCF2 - DAC Global Configuration 2]$
 727   1      
 728   1      }
 729          
 730          extern void VREF_0_enter_DefaultMode_from_RESET(void) {
 731   1              // $[REF0CN - Voltage Reference Control]
 732   1              /*
 733   1               // 2.4 V reference output to VREF pin
 734   1               */
 735   1              SFRPAGE = 0x00;
 736   1              REF0CN = REF0CN_VREFSL__VREF_2P4;
 737   1              // [REF0CN - Voltage Reference Control]$
 738   1      
 739   1      }
 740          
 741          extern void PORTS_1_enter_DefaultMode_from_RESET(void) {
 742   1              // $[P1 - Port 1 Pin Latch]
 743   1              /*
C51 COMPILER V9.53.0.0   INITDEVICE                                                        09/13/2016 14:13:52 PAGE 13  

 744   1               // P1.0 is high. Set P1.0 to drive or float high
 745   1               // P1.1 is low. Set P1.1 to drive low
 746   1               // P1.2 is high. Set P1.2 to drive or float high
 747   1               // P1.3 is low. Set P1.3 to drive low
 748   1               // P1.4 is high. Set P1.4 to drive or float high
 749   1               // P1.5 is high. Set P1.5 to drive or float high
 750   1               // P1.6 is high. Set P1.6 to drive or float high
 751   1               // P1.7 is high. Set P1.7 to drive or float high
 752   1               */
 753   1              P1 = P1_B0__HIGH | P1_B1__LOW | P1_B2__HIGH | P1_B3__LOW | P1_B4__HIGH
 754   1                              | P1_B5__HIGH | P1_B6__HIGH | P1_B7__HIGH;
 755   1              // [P1 - Port 1 Pin Latch]$
 756   1      
 757   1              // $[P1MDOUT - Port 1 Output Mode]
 758   1              // [P1MDOUT - Port 1 Output Mode]$
 759   1      
 760   1              // $[P1MDIN - Port 1 Input Mode]
 761   1              // [P1MDIN - Port 1 Input Mode]$
 762   1      
 763   1              // $[P1SKIP - Port 1 Skip]
 764   1              // [P1SKIP - Port 1 Skip]$
 765   1      
 766   1              // $[P1MASK - Port 1 Mask]
 767   1              // [P1MASK - Port 1 Mask]$
 768   1      
 769   1              // $[P1MAT - Port 1 Match]
 770   1              /*
 771   1               // P1.0 pin logic value is compared with logic HIGH
 772   1               // P1.1 pin logic value is compared with logic LOW
 773   1               // P1.2 pin logic value is compared with logic HIGH
 774   1               // P1.3 pin logic value is compared with logic LOW
 775   1               // P1.4 pin logic value is compared with logic HIGH
 776   1               // P1.5 pin logic value is compared with logic HIGH
 777   1               // P1.6 pin logic value is compared with logic HIGH
 778   1               // P1.7 pin logic value is compared with logic HIGH
 779   1               */
 780   1              P1MAT = P1MAT_B0__HIGH | P1MAT_B1__LOW | P1MAT_B2__HIGH | P1MAT_B3__LOW
 781   1                              | P1MAT_B4__HIGH | P1MAT_B5__HIGH | P1MAT_B6__HIGH | P1MAT_B7__HIGH;
 782   1              // [P1MAT - Port 1 Match]$
 783   1      
 784   1      }
 785          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    309    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
