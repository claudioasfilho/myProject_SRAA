C51 COMPILER V9.53.0.0   SCHEDULER                                                         09/14/2016 14:44:28 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE SCHEDULER
OBJECT MODULE PLACED IN .\src\Scheduler.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\clfilho
                    -\SimplicityStudio\v3_workspace\myProject - DAC Enabled\src\Scheduler.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGL
                    -EVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:/Users/clfilho/SimplicityStudio/v3_workspa
                    -ce/myProject - DAC Enabled/inc;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/shared/si8051Base;C:/
                    -SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/EFM8BB3;C:/SiliconLabs/SimplicityStudio/v3/developer/sd
                    -ks/si8051/v3//Device/EFM8BB3/inc) PRINT(.\src\Scheduler.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\Scheduler.O
                    -BJ)

line level    source

   1          
   2          #include <SI_EFM8BB3_Register_Enums.h>                  // SFR declarations
   3          
   4          #include "PID.h"
   5          #include "Scheduler.h"
   6          
   7          /* Declaration of all the Tasks that will be performed by the scheduler *
   8           * All Tasks are disabled and period is set to 10 ticks by default * */
   9          //void Pot_Handler(void)
  10          
  11          
  12          xdata SYSTASKS tasks[MAX_TASKS] =
  13          {
  14              /*
  15               * period,  counter,    Flags,  Function Pointer (To Object Handler that requires constant threat) */
  16          
  17              {   1,         0,      0,      &DACOutputHandler},
  18              {   10,         0,      0,      &PIDHandler},
  19              {   1,         0,      0,      &DACOutputHandler},
  20              {   10,         0,      0,      &PIDHandler},
  21              {   1,         0,      0,      &DACOutputHandler},
  22              {   10,         0,      0,      &PIDHandler},
  23          
  24          };
  25          
  26          
  27          /*This Function is called by the objects and update the flags*/
  28          
  29          void Update_task_Flags ( OBJFLAGS Flags , TASKSID tasknum)
  30          {
  31   1          tasks[tasknum].Flags = Flags;
  32   1      }
  33          
  34          /*This Function is called by the objects and update the period, which is how often every task should run*/
  35          void Update_task_period ( uint16_t period , TASKSID tasknum)
  36          {
  37   1          tasks[tasknum].period = period;
  38   1      }
  39          
  40          /*This is the Scheduler itself. It is called by the Timer 2 interrupt and then it jumps on the tasks
  41           * once the Task period matches. The priority is defined by the way they are listed on the TASKSID
  42           * enumeration. */
  43          
  44          
  45          void Scheduler_CallBack(void)
  46          {
  47   1      static TASKSID taskCounter;
  48   1      
  49   1       for (taskCounter = DELAY_TASK; taskCounter < MAX_TASKS; taskCounter++)
  50   1          {
C51 COMPILER V9.53.0.0   SCHEDULER                                                         09/14/2016 14:44:28 PAGE 2   

  51   2              if (tasks[taskCounter].Flags.Enabled == 1)
  52   2              {
  53   3                  if (tasks[taskCounter].counter++ == tasks[taskCounter].period)
  54   3                       {
  55   4                           (tasks[taskCounter].function)();
  56   4                           tasks[taskCounter].counter=0;
  57   4                       }
  58   3              }
  59   2       
  60   2          }
  61   1      
  62   1      
  63   1      
  64   1         // Buttons_Handler();
  65   1      }
  66          /**
  67            End of File
  68          */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    178    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     60    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
