C51 COMPILER V9.53.0.0   PID                                                               10/04/2016 13:50:57 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE PID
OBJECT MODULE PLACED IN .\src\PID.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\john\Si
                    -mplicityStudio\v3_workspace\Soraa - MR16\src\PID.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3
                    -) OPTIMIZE(8,SPEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:/Users/john/SimplicityStudio/v3_workspace/Soraa - MR16/inc;C:/
                    -SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v3/de
                    -veloper/sdks/si8051/v3//Device/EFM8BB3;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/EFM8BB3/inc) 
                    -PRINT(.\src\PID.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\PID.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // PID.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2016, Silicon Laboratories, Inc.
   5          // http://www.silabs.com
   6          //
   7          // Created on: Sept 2016
   8          //     Author: Claudio Filho
   9          //
  10          // PID controller for EFM8
  11          //
  12          //-----------------------------------------------------------------------------
  13          
  14          #include <SI_EFM8BB3_Register_Enums.h>
  15          #include "PID.h"
  16          
  17          
  18          //Constants for the PID Controller
  19          
  20          //Error Limits
  21          #define errorlimitH 800
  22          #define errorlimitL -800
  23          #define errorlimitenable 0
  24          //PID Output Limit
  25          #define PIDOutlimitH 4095
  26          
  27          //System Set point
  28          #define OutputSetPoint  2000
  29          
  30          //PID Multiplying Factors
  31          #define Kp 1000
  32          #define Ki 2
  33          #define Kd 1000
  34          
  35          #define AverageADCEnabled 0
  36          //Static Variables for PID Control
  37          
  38          static xdata int16_t Error;
  39          static xdata int16_t Error_Integral;
  40          static xdata int16_t Error_Derivative;
  41          static xdata  int16_t Previous_Error =0;
  42          static xdata  int16_t P_term;
  43          static xdata  int16_t I_term;
  44          static xdata  int16_t D_term;
  45          static xdata  int32_t PIDresult;
  46          
  47          #define PIDARRAYSIZE 100
  48          static xdata PIDR PIDread[PIDARRAYSIZE];
  49          static xdata uint8_t PIDcounter=0;
  50          
  51          static xdata uint16_t ADCResult=0;
C51 COMPILER V9.53.0.0   PID                                                               10/04/2016 13:50:57 PAGE 2   

  52          static xdata uint32_t ADCAveragedValue=0;
  53          
  54          static xdata uint16_t ADCResultArray[PIDARRAYSIZE]=0;
  55          
  56          static xdata uint16_t ADCCounter=1;
  57          static xdata uint16_t OutputResult;
  58          
  59          static xdata uint32_t tickcounter=0;
  60          
  61          //Static Variables for PID Control
  62          
  63          static xdata uint16_t DimmerCount;
  64          static xdata uint16_t Previous_DimmerCount;
  65          
  66          
  67          uint16_t CalculatePID(uint16_t current_ADC)
  68          {
  69   1              //Scale goes from 0 to 4095
  70   1      
  71   1      
  72   1              Error = OutputSetPoint - current_ADC;
  73   1      
  74   1              PIDread[PIDcounter].ADC = current_ADC;
  75   1      
  76   1              Error_Integral = Error_Integral + Error;
  77   1      #if  errorlimitenable
              /* XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXx*/
                      if(Error_Integral > errorlimitH)
                                      {
                                              Error_Integral = errorlimitH;
                                      }
              
                      else if(Error_Integral < errorlimitL)
                              {
                                      Error_Integral = errorlimitL;
                              }
              /*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*/
              #endif
  90   1      
  91   1              Error_Derivative = Error - Previous_Error;
  92   1      
  93   1              Previous_Error = Error;
  94   1      
  95   1              //P_term = (Kp*Error);
  96   1              P_term = Error/Kp;
  97   1              PIDread[PIDcounter].P_term = P_term;
  98   1      
  99   1              //I_term = (Ki*Error_Integral);
 100   1              I_term = Error_Integral>>Ki;
 101   1              PIDread[PIDcounter].I_term= I_term;
 102   1      
 103   1              D_term = (Error_Derivative/Kd);
 104   1              PIDread[PIDcounter].D_term = D_term;
 105   1      
 106   1      
 107   1              PIDresult = P_term + I_term + D_term;
 108   1      
 109   1              //PIDread[PIDcounter].Result = PIDresult;
 110   1      
 111   1      
 112   1      
 113   1              //PIDresult = PIDresult;
 114   1      
C51 COMPILER V9.53.0.0   PID                                                               10/04/2016 13:50:57 PAGE 3   

 115   1              if(PIDresult >= PIDOutlimitH)
 116   1              {
 117   2                      PIDresult = PIDOutlimitH;
 118   2              }
 119   1      
 120   1              if(PIDresult < 0) {PIDresult = 0;}
 121   1      
 122   1              //PIDresult = ADCResult;
 123   1      
 124   1              return PIDresult;
 125   1      }
 126          
 127          void Tick()
 128          {
 129   1              if (tickcounter++>=500) tickcounter=500;
 130   1      }
 131          
 132          void SetDACOutput(uint16_t value)
 133          {
 134   1      
 135   1              SFRPAGE = 0x30;
 136   1              DAC0H = value >>8;
 137   1              DAC0L= (char) value;
 138   1              PIDread[PIDcounter++].DAC = value;
 139   1              if(PIDcounter==PIDARRAYSIZE)
 140   1      
 141   1                      {
 142   2                              PIDcounter=0;
 143   2                      }
 144   1      /*
 145   1              if (  ( (value > (PIDread[PIDcounter-1].DAC + 5)) || (value < (PIDread[PIDcounter-1].DAC - 5)) ) && (tick
             -counter>500))
 146   1              {
 147   1                      value = value;
 148   1              }
 149   1      */
 150   1      }
 151          
 152          void GetADC(uint16_t value)
 153          {
 154   1      #if AverageADCEnabled
                      //ADCAveragedValue += value>>4;
                      ADCResultArray[ADCCounter] = value;
                      ADCAveragedValue += value;
                      ADCCounter++;
                      if (ADCAveragedValue > 245000)
                      {
                              NOP();
                      }
              
              #else
 165   1              ADCResult = value;
 166   1      #endif
 167   1      }
 168          
 169          void ADCAverageHandler()
 170          {
 171   1      #if AverageADCEnabled
                      ADCResult = ADCAveragedValue / ADCCounter;
              
                      if (ADCResult > 3500)
                      {
                              //ADCResult = 2000;
C51 COMPILER V9.53.0.0   PID                                                               10/04/2016 13:50:57 PAGE 4   

                              ADCAveragedValue=0;
                      }
                      ADCAveragedValue=0;
                      ADCCounter=0;
              #else
 182   1      
 183   1      #endif
 184   1      }
 185          
 186          
 187          void PIDHandler()
 188          {
 189   1              //SetTest1();
 190   1              OutputResult = CalculatePID(ADCResult);
 191   1              //ClearTest1();
 192   1      }
 193          
 194          void DACOutputHandler()
 195          {
 196   1      
 197   1              SetDACOutput(OutputResult);
 198   1      }
 199          
 200          
 201          void DimmerCounterHandler()
 202          {
 203   1              //Un comment if this is called from another interrupt vector that is not timer 0
 204   1      
 205   1              SFRPAGE = 0x00;
 206   1      
 207   1              TCON &= 0xBF;   //Stop Timer 1 count
 208   1      
 209   1              DimmerCount = TH1<<8;
 210   1              DimmerCount += TL1;
 211   1      
 212   1              if (DimmerCount>10)
 213   1              {
 214   2                      //PCA0CN0 &= 0x70;      //Clears PCA0 interrupt
 215   2                              //ToogleTest1();
 216   2      
 217   2                      //It Resets Timer 1 count because something was captured
 218   2                      TL1=0;
 219   2                      TH1=0;
 220   2                      Previous_DimmerCount = DimmerCount;
 221   2      
 222   2              }
 223   1      
 224   1              TCON |= 0x40;//Timer 1 Run
 225   1      }
 226          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    540    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   1237    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
C51 COMPILER V9.53.0.0   PID                                                               10/04/2016 13:50:57 PAGE 5   

   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
