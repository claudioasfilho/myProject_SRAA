C51 COMPILER V9.53.0.0   PID                                                               09/14/2016 15:18:55 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE PID
OBJECT MODULE PLACED IN .\src\PID.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\clfilho
                    -\SimplicityStudio\v3_workspace\myProject - DAC Enabled\src\PID.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2
                    -) FLOATFUZZY(3) OPTIMIZE(8,SPEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:/Users/clfilho/SimplicityStudio/v3_workspace/myP
                    -roject - DAC Enabled/inc;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/shared/si8051Base;C:/Silico
                    -nLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/EFM8BB3;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8
                    -051/v3//Device/EFM8BB3/inc) PRINT(.\src\PID.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\PID.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // PID.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2016, Silicon Laboratories, Inc.
   5          // http://www.silabs.com
   6          //
   7          // Created on: Sept 2016
   8          //     Author: Claudio Filho
   9          //
  10          // PID controller for EFM8
  11          //
  12          //-----------------------------------------------------------------------------
  13          
  14          #include <SI_EFM8BB3_Register_Enums.h>
  15          
  16          
  17          //Constants
  18          
  19          #define errorlimitH 0x00
  20          #define errorlimitL 0x00
  21          
  22          #define setPoint        0x00
  23          
  24          #define Kp 0x0003
  25          #define Ki 0x0000
  26          #define Kd 0x0000
  27          
  28          
  29          //Static Variables
  30          
  31          
  32          static int8_t error;
  33          static int8_t n1_error =0;
  34          static int8_t P_term;
  35          static int8_t I_term;
  36          static int8_t D_term;
  37          static int16_t PIDresult;
  38          
  39          static xdata uint16_t ADCResult;
  40          
  41          
  42          uint16_t CalculatePID(uint16_t current_error)
  43          {
  44   1              //Scale goes from 0 to 4095
  45   1      
  46   1      
  47   1              error = setPoint - current_error;
  48   1      
  49   1              if(error>errorlimitH)
  50   1              {
  51   2                      error = errorlimitH;
C51 COMPILER V9.53.0.0   PID                                                               09/14/2016 15:18:55 PAGE 2   

  52   2              }
  53   1      
  54   1              if(error<errorlimitL)
  55   1              {
  56   2                      error = errorlimitL;
  57   2              }
  58   1      
  59   1              P_term = (error*Kp)>>8;
  60   1      
  61   1              I_term += (error*Ki)>>8; //This I term may have to be desaturated (anti - windup).
  62   1      
  63   1              D_term = (n1_error *Kd)>>8;
  64   1      
  65   1              PIDresult = P_term + I_term + D_term;
  66   1      
  67   1              return PIDresult;
  68   1      }
  69          
  70          void SetDACOutput(uint16_t value)
  71          {
  72   1              SFRPAGE = 0x30;
  73   1      
  74   1              DAC0L = value;
  75   1              DAC0H= value >>8;
  76   1      }
  77          
  78          void ReadADC(uint16_t value)
  79          {
  80   1              ADCResult = value>>5; //Dividing by 32 to get the averaged value
  81   1      }
  82          
  83          void PIDHandler()
  84          {
  85   1      
  86   1      }
  87          
  88          
  89          void DACOutputHandler()
  90          {
  91   1      
  92   1      }
  93          
  94          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    120    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      7    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
