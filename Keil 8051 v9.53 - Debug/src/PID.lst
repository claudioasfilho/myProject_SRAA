C51 COMPILER V9.53.0.0   PID                                                               09/20/2016 15:38:41 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE PID
OBJECT MODULE PLACED IN .\src\PID.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\clfilho
                    -\SimplicityStudio\v3_workspace\myProject - DAC Enabled\src\PID.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2
                    -) FLOATFUZZY(3) OPTIMIZE(8,SPEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:/Users/clfilho/SimplicityStudio/v3_workspace/myP
                    -roject - DAC Enabled/inc;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/shared/si8051Base;C:/Silico
                    -nLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/EFM8BB3;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8
                    -051/v3//Device/EFM8BB3/inc) PRINT(.\src\PID.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\PID.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // PID.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2016, Silicon Laboratories, Inc.
   5          // http://www.silabs.com
   6          //
   7          // Created on: Sept 2016
   8          //     Author: Claudio Filho
   9          //
  10          // PID controller for EFM8
  11          //
  12          //-----------------------------------------------------------------------------
  13          
  14          #include <SI_EFM8BB3_Register_Enums.h>
  15          #include "PID.h"
  16          
  17          
  18          //Constants for the PID Controller
  19          
  20          //Error Limits
  21          #define errorlimitH 50
  22          #define errorlimitL -50
  23          
  24          //PID Output Limit
  25          #define PIDOutlimitH 4095
  26          
  27          //System Set point
  28          #define OutputSetPoint  4000
  29          
  30          //PID Multiplying Factors
  31          #define Kp 0x0003
  32          #define Ki 0x00101
  33          #define Kd 0x01000
  34          
  35          
  36          //Static Variables for PID Control
  37          
  38          static xdata int16_t Error;
  39          static xdata int16_t Error_Integral;
  40          static xdata int16_t Error_Derivative;
  41          static xdata  int16_t Previous_Error =0;
  42          static xdata  int16_t P_term;
  43          static xdata  int16_t I_term;
  44          static xdata  int16_t D_term;
  45          static xdata  int16_t PIDresult;
  46          
  47          static xdata uint16_t ADCResult;
  48          static xdata uint16_t OutputResult;
  49          
  50          //Static Variables for PID Control
  51          
C51 COMPILER V9.53.0.0   PID                                                               09/20/2016 15:38:41 PAGE 2   

  52          static xdata uint16_t DimmerCount;
  53          static xdata uint16_t Previous_DimmerCount;
  54          
  55          
  56          uint16_t CalculatePID(uint16_t current_ADC)
  57          {
  58   1              //Scale goes from 0 to 4095
  59   1      
  60   1      
  61   1              Error = OutputSetPoint - current_ADC;
  62   1      
  63   1      
  64   1              Error_Integral = Error_Integral + Error;
  65   1      
  66   1              if(Error_Integral > errorlimitH)
  67   1                              {
  68   2                                      Error_Integral = errorlimitH;
  69   2                              }
  70   1      
  71   1              else if(Error_Integral < errorlimitL)
  72   1                      {
  73   2                              Error_Integral = errorlimitL;
  74   2                      }
  75   1      
  76   1              Error_Derivative = Error - Previous_Error;
  77   1              Previous_Error = Error;
  78   1      
  79   1              PIDresult = (Kp*Error) + (Ki*Error_Integral) + (Kd*Error_Derivative);
  80   1      
  81   1      
  82   1              PIDresult = PIDresult>>2;
  83   1      
  84   1              if(PIDresult >= PIDOutlimitH)
  85   1              {
  86   2                      PIDresult = PIDOutlimitH;
  87   2              }
  88   1      
  89   1              if(PIDresult < 0) {PIDresult = 0;}
  90   1      
  91   1              //PIDresult = ADCResult;
  92   1      
  93   1              return PIDresult;
  94   1      }
  95          
  96          void SetDACOutput(uint16_t value)
  97          {
  98   1      
  99   1              SFRPAGE = 0x30;
 100   1              DAC0H = value >>8;
 101   1              DAC0L= (char) value;
 102   1      }
 103          
 104          void GetADC(uint16_t value)
 105          {
 106   1              ADCResult = value>>4; //Dividing by 16 to get the averaged value from the 16 reads
 107   1      }
 108          
 109          
 110          
 111          
 112          void PIDHandler()
 113          {
 114   1      
C51 COMPILER V9.53.0.0   PID                                                               09/20/2016 15:38:41 PAGE 3   

 115   1              OutputResult = CalculatePID(ADCResult);
 116   1      
 117   1      }
 118          
 119          void DACOutputHandler()
 120          {
 121   1              SetDACOutput(OutputResult);
 122   1      }
 123          
 124          
 125          void DimmerCounterHandler()
 126          {
 127   1              //Un comment if this is called from another interrupt vector that is not timer 0
 128   1      
 129   1              SFRPAGE = 0x00;
 130   1      
 131   1              TCON &= 0xBF;   //Stop Timer 1 count
 132   1      
 133   1              DimmerCount = TH1<<8;
 134   1              DimmerCount += TL1;
 135   1      
 136   1              if (DimmerCount>10)
 137   1              {
 138   2                      //PCA0CN0 &= 0x70;      //Clears PCA0 interrupt
 139   2                              //ToogleTest1();
 140   2      
 141   2                      //It Resets Timer 1 count because something was captured
 142   2                      TL1=0;
 143   2                      TH1=0;
 144   2                      Previous_DimmerCount = DimmerCount;
 145   2      
 146   2              }
 147   1      
 148   1              TCON |= 0x40;//Timer 1 Run
 149   1      }
 150          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    366    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     24    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
